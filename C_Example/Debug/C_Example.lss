
C_Example.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c14  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000036  00800060  00000c14  00000ca8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  00800096  00800096  00000cde  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cde  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d10  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000290  00000000  00000000  00000d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002190  00000000  00000000  00000fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fec  00000000  00000000  0000316c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001538  00000000  00000000  00004158  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000470  00000000  00000000  00005690  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000af0  00000000  00000000  00005b00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d46  00000000  00000000  000065f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a8  00000000  00000000  00007336  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e1       	ldi	r30, 0x14	; 20
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 39       	cpi	r26, 0x96	; 150
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e9       	ldi	r26, 0x96	; 150
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 3a       	cpi	r26, 0xA3	; 163
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 cd 01 	call	0x39a	; 0x39a <main>
  8a:	0c 94 08 06 	jmp	0xc10	; 0xc10 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Mod_Init>:

/*Private Functions*/

/*Functions*/
void Mod_Init (void)
{
  92:	08 95       	ret

00000094 <Mod_Cyclic>:
	/*TODO: - Init all Global Variables and states*/
	
}

void Mod_Cyclic (void)
{
  94:	08 95       	ret

00000096 <Mod_GetCurrentMode>:
}

Mod_StateTyp Mod_GetCurrentMode (void)
{
	/*TODO: - This function shall return the current State*/
  96:	08 95       	ret

00000098 <Motor_Init>:
{
	/*TODO: - Init Globla Variables 
			- Switch Motor OFF
	*/
	/* SHA3RAWY */
	Gb_Motor = MOTOR_OFF;
  98:	10 92 96 00 	sts	0x0096, r1	; 0x800096 <__data_end>
  9c:	08 95       	ret

0000009e <Pos_Init>:
/*Private Functions*/

/*Functions*/
void Pos_Init (void)
{
	G_WindowPos = 0u;
  9e:	10 92 97 00 	sts	0x0097, r1	; 0x800097 <G_WindowPos>
  a2:	08 95       	ret

000000a4 <Pos_Cyclic>:
}

void Pos_Cyclic (void)
{
  a4:	1f 93       	push	r17
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	1f 92       	push	r1
  ac:	cd b7       	in	r28, 0x3d	; 61
  ae:	de b7       	in	r29, 0x3e	; 62
	boolean PosSwitch = STD_FALSE;
  b0:	19 82       	std	Y+1, r1	; 0x01
	Mod_StateTyp PosDirection = Mod_GetCurrentMode();
  b2:	0e 94 4b 00 	call	0x96	; 0x96 <Mod_GetCurrentMode>
  b6:	18 2f       	mov	r17, r24
	
	Sw_GetState(SW_POS, &PosSwitch);
  b8:	be 01       	movw	r22, r28
  ba:	6f 5f       	subi	r22, 0xFF	; 255
  bc:	7f 4f       	sbci	r23, 0xFF	; 255
  be:	82 e0       	ldi	r24, 0x02	; 2
  c0:	0e 94 ba 01 	call	0x374	; 0x374 <Sw_GetState>
	
	if (STD_TRUE == PosSwitch)
  c4:	89 81       	ldd	r24, Y+1	; 0x01
  c6:	81 30       	cpi	r24, 0x01	; 1
  c8:	99 f4       	brne	.+38     	; 0xf0 <Pos_Cyclic+0x4c>
	{
		if (UP_STATE == PosDirection)
  ca:	11 30       	cpi	r17, 0x01	; 1
  cc:	41 f4       	brne	.+16     	; 0xde <Pos_Cyclic+0x3a>
		{
			if (100u != G_WindowPos)
  ce:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <G_WindowPos>
  d2:	84 36       	cpi	r24, 0x64	; 100
  d4:	69 f0       	breq	.+26     	; 0xf0 <Pos_Cyclic+0x4c>
			{
				G_WindowPos += POS_STEP;
  d6:	8b 5f       	subi	r24, 0xFB	; 251
  d8:	80 93 97 00 	sts	0x0097, r24	; 0x800097 <G_WindowPos>
  dc:	09 c0       	rjmp	.+18     	; 0xf0 <Pos_Cyclic+0x4c>
			}
		} 
		else if (DOWN_STATE == PosDirection)
  de:	12 30       	cpi	r17, 0x02	; 2
  e0:	39 f4       	brne	.+14     	; 0xf0 <Pos_Cyclic+0x4c>
		{
			if (0u != G_WindowPos)
  e2:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <G_WindowPos>
  e6:	88 23       	and	r24, r24
  e8:	19 f0       	breq	.+6      	; 0xf0 <Pos_Cyclic+0x4c>
			{
				G_WindowPos -= POS_STEP;
  ea:	85 50       	subi	r24, 0x05	; 5
  ec:	80 93 97 00 	sts	0x0097, r24	; 0x800097 <G_WindowPos>
			}
		}
	}
}
  f0:	0f 90       	pop	r0
  f2:	df 91       	pop	r29
  f4:	cf 91       	pop	r28
  f6:	1f 91       	pop	r17
  f8:	08 95       	ret

000000fa <WinBtn_Init>:
static WinBtn_StateTyp G_ButtonState = WINBTN_IDLE;
/*Private Functions*/

/*Functions*/
void WinBtn_Init (void)
{
  fa:	08 95       	ret

000000fc <Led_ON>:
Std_RetTyp Led_ON(Led_LedIdTyp LedId)
{
	Std_RetTyp RetVal = STD_OK;
	const Led_CfgTyp * CfgPtr = NULL;
	
	if ((LedId >= LED_NUM_OF_LEDS) || (LedInitState != LED_INITALIZED))
  fc:	83 30       	cpi	r24, 0x03	; 3
  fe:	68 f5       	brcc	.+90     	; 0x15a <Led_ON+0x5e>
 100:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <LedInitState>
 104:	91 11       	cpse	r25, r1
 106:	2b c0       	rjmp	.+86     	; 0x15e <Led_ON+0x62>
	{
		RetVal = STD_NOT_OK;
	} 
	else
	{
		CfgPtr = &Led_CfgArr[LedId];
 108:	90 e0       	ldi	r25, 0x00	; 0
		
		if (STD_ACTIVE_HIGH == CfgPtr->ActiveState)
 10a:	fc 01       	movw	r30, r24
 10c:	ee 0f       	add	r30, r30
 10e:	ff 1f       	adc	r31, r31
 110:	e8 0f       	add	r30, r24
 112:	f9 1f       	adc	r31, r25
 114:	ed 59       	subi	r30, 0x9D	; 157
 116:	ff 4f       	sbci	r31, 0xFF	; 255
 118:	21 81       	ldd	r18, Z+1	; 0x01
 11a:	21 30       	cpi	r18, 0x01	; 1
 11c:	71 f4       	brne	.+28     	; 0x13a <Led_ON+0x3e>
		{
			Dio_Write(CfgPtr->LedChannelId , STD_HIGH);
 11e:	fc 01       	movw	r30, r24
 120:	ee 0f       	add	r30, r30
 122:	ff 1f       	adc	r31, r31
 124:	8e 0f       	add	r24, r30
 126:	9f 1f       	adc	r25, r31
 128:	fc 01       	movw	r30, r24
 12a:	ed 59       	subi	r30, 0x9D	; 157
 12c:	ff 4f       	sbci	r31, 0xFF	; 255
 12e:	61 e0       	ldi	r22, 0x01	; 1
 130:	80 81       	ld	r24, Z
 132:	0e 94 21 04 	call	0x842	; 0x842 <Dio_Write>
	return RetVal;
}

Std_RetTyp Led_ON(Led_LedIdTyp LedId)
{
	Std_RetTyp RetVal = STD_OK;
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	08 95       	ret
		
		if (STD_ACTIVE_HIGH == CfgPtr->ActiveState)
		{
			Dio_Write(CfgPtr->LedChannelId , STD_HIGH);
		} 
		else if (STD_ACTIVE_LOW == CfgPtr->ActiveState)
 13a:	21 11       	cpse	r18, r1
 13c:	12 c0       	rjmp	.+36     	; 0x162 <Led_ON+0x66>
		{
			Dio_Write(CfgPtr->LedChannelId , STD_LOW);
 13e:	fc 01       	movw	r30, r24
 140:	ee 0f       	add	r30, r30
 142:	ff 1f       	adc	r31, r31
 144:	8e 0f       	add	r24, r30
 146:	9f 1f       	adc	r25, r31
 148:	fc 01       	movw	r30, r24
 14a:	ed 59       	subi	r30, 0x9D	; 157
 14c:	ff 4f       	sbci	r31, 0xFF	; 255
 14e:	60 e0       	ldi	r22, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	0e 94 21 04 	call	0x842	; 0x842 <Dio_Write>
	return RetVal;
}

Std_RetTyp Led_ON(Led_LedIdTyp LedId)
{
	Std_RetTyp RetVal = STD_OK;
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	08 95       	ret
	const Led_CfgTyp * CfgPtr = NULL;
	
	if ((LedId >= LED_NUM_OF_LEDS) || (LedInitState != LED_INITALIZED))
	{
		RetVal = STD_NOT_OK;
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	08 95       	ret
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	08 95       	ret
	return RetVal;
}

Std_RetTyp Led_ON(Led_LedIdTyp LedId)
{
	Std_RetTyp RetVal = STD_OK;
 162:	80 e0       	ldi	r24, 0x00	; 0
			/*Nothing*/
		}
	}
	
	return RetVal;
}
 164:	08 95       	ret

00000166 <Led_OFF>:
Std_RetTyp Led_OFF(Led_LedIdTyp LedId)
{
	Std_RetTyp RetVal = STD_OK;
	const Led_CfgTyp * CfgPtr = NULL;
	
	if ((LedId >= LED_NUM_OF_LEDS) || (LedInitState != LED_INITALIZED))
 166:	83 30       	cpi	r24, 0x03	; 3
 168:	68 f5       	brcc	.+90     	; 0x1c4 <Led_OFF+0x5e>
 16a:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <LedInitState>
 16e:	91 11       	cpse	r25, r1
 170:	2b c0       	rjmp	.+86     	; 0x1c8 <Led_OFF+0x62>
	{
		RetVal = STD_NOT_OK;
	}
	else
	{
		CfgPtr = &Led_CfgArr[LedId];
 172:	90 e0       	ldi	r25, 0x00	; 0
		
		if (STD_ACTIVE_HIGH == CfgPtr->ActiveState)
 174:	fc 01       	movw	r30, r24
 176:	ee 0f       	add	r30, r30
 178:	ff 1f       	adc	r31, r31
 17a:	e8 0f       	add	r30, r24
 17c:	f9 1f       	adc	r31, r25
 17e:	ed 59       	subi	r30, 0x9D	; 157
 180:	ff 4f       	sbci	r31, 0xFF	; 255
 182:	21 81       	ldd	r18, Z+1	; 0x01
 184:	21 30       	cpi	r18, 0x01	; 1
 186:	71 f4       	brne	.+28     	; 0x1a4 <Led_OFF+0x3e>
		{
			Dio_Write(CfgPtr->LedChannelId , STD_LOW);
 188:	fc 01       	movw	r30, r24
 18a:	ee 0f       	add	r30, r30
 18c:	ff 1f       	adc	r31, r31
 18e:	8e 0f       	add	r24, r30
 190:	9f 1f       	adc	r25, r31
 192:	fc 01       	movw	r30, r24
 194:	ed 59       	subi	r30, 0x9D	; 157
 196:	ff 4f       	sbci	r31, 0xFF	; 255
 198:	60 e0       	ldi	r22, 0x00	; 0
 19a:	80 81       	ld	r24, Z
 19c:	0e 94 21 04 	call	0x842	; 0x842 <Dio_Write>
}


Std_RetTyp Led_OFF(Led_LedIdTyp LedId)
{
	Std_RetTyp RetVal = STD_OK;
 1a0:	80 e0       	ldi	r24, 0x00	; 0
 1a2:	08 95       	ret
		
		if (STD_ACTIVE_HIGH == CfgPtr->ActiveState)
		{
			Dio_Write(CfgPtr->LedChannelId , STD_LOW);
		}
		else if (STD_ACTIVE_LOW == CfgPtr->ActiveState)
 1a4:	21 11       	cpse	r18, r1
 1a6:	12 c0       	rjmp	.+36     	; 0x1cc <Led_OFF+0x66>
		{
			Dio_Write(CfgPtr->LedChannelId , STD_HIGH);
 1a8:	fc 01       	movw	r30, r24
 1aa:	ee 0f       	add	r30, r30
 1ac:	ff 1f       	adc	r31, r31
 1ae:	8e 0f       	add	r24, r30
 1b0:	9f 1f       	adc	r25, r31
 1b2:	fc 01       	movw	r30, r24
 1b4:	ed 59       	subi	r30, 0x9D	; 157
 1b6:	ff 4f       	sbci	r31, 0xFF	; 255
 1b8:	61 e0       	ldi	r22, 0x01	; 1
 1ba:	80 81       	ld	r24, Z
 1bc:	0e 94 21 04 	call	0x842	; 0x842 <Dio_Write>
}


Std_RetTyp Led_OFF(Led_LedIdTyp LedId)
{
	Std_RetTyp RetVal = STD_OK;
 1c0:	80 e0       	ldi	r24, 0x00	; 0
 1c2:	08 95       	ret
	const Led_CfgTyp * CfgPtr = NULL;
	
	if ((LedId >= LED_NUM_OF_LEDS) || (LedInitState != LED_INITALIZED))
	{
		RetVal = STD_NOT_OK;
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	08 95       	ret
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	08 95       	ret
}


Std_RetTyp Led_OFF(Led_LedIdTyp LedId)
{
	Std_RetTyp RetVal = STD_OK;
 1cc:	80 e0       	ldi	r24, 0x00	; 0
			/*Nothing*/
		}
	}
	
	return RetVal;
}
 1ce:	08 95       	ret

000001d0 <Led_Init>:
#include "Led.h"

Led_InitTyp LedInitState = LED_UNINITIALIZED ;

Std_RetTyp Led_Init(void)
{
 1d0:	ff 92       	push	r15
 1d2:	0f 93       	push	r16
 1d4:	1f 93       	push	r17
 1d6:	cf 93       	push	r28
 1d8:	df 93       	push	r29
 1da:	03 e6       	ldi	r16, 0x63	; 99
 1dc:	10 e0       	ldi	r17, 0x00	; 0
	Std_RetTyp RetVal = STD_OK;
	uint8 LedIdx = 0;
 1de:	c0 e0       	ldi	r28, 0x00	; 0

Led_InitTyp LedInitState = LED_UNINITIALIZED ;

Std_RetTyp Led_Init(void)
{
	Std_RetTyp RetVal = STD_OK;
 1e0:	d0 e0       	ldi	r29, 0x00	; 0
		{
			Led_OFF(LedIdx);
		} 
		else
		{
			RetVal = STD_NOT_OK ;
 1e2:	ff 24       	eor	r15, r15
 1e4:	f3 94       	inc	r15
	Std_RetTyp RetVal = STD_OK;
	uint8 LedIdx = 0;
	
	while (LedIdx < LED_NUM_OF_LEDS)
	{
		if (LED_ON == Led_CfgArr[LedIdx].InitVal)
 1e6:	f8 01       	movw	r30, r16
 1e8:	82 81       	ldd	r24, Z+2	; 0x02
 1ea:	81 30       	cpi	r24, 0x01	; 1
 1ec:	21 f4       	brne	.+8      	; 0x1f6 <Led_Init+0x26>
		{
			Led_ON(LedIdx);
 1ee:	8c 2f       	mov	r24, r28
 1f0:	0e 94 7e 00 	call	0xfc	; 0xfc <Led_ON>
 1f4:	07 c0       	rjmp	.+14     	; 0x204 <Led_Init+0x34>
		} 
		else if (LED_OFF == Led_CfgArr[LedIdx].InitVal)
 1f6:	81 11       	cpse	r24, r1
 1f8:	04 c0       	rjmp	.+8      	; 0x202 <Led_Init+0x32>
		{
			Led_OFF(LedIdx);
 1fa:	8c 2f       	mov	r24, r28
 1fc:	0e 94 b3 00 	call	0x166	; 0x166 <Led_OFF>
 200:	01 c0       	rjmp	.+2      	; 0x204 <Led_Init+0x34>
		} 
		else
		{
			RetVal = STD_NOT_OK ;
 202:	df 2d       	mov	r29, r15
		}
			
		LedIdx++;
 204:	cf 5f       	subi	r28, 0xFF	; 255
 206:	0d 5f       	subi	r16, 0xFD	; 253
 208:	1f 4f       	sbci	r17, 0xFF	; 255
Std_RetTyp Led_Init(void)
{
	Std_RetTyp RetVal = STD_OK;
	uint8 LedIdx = 0;
	
	while (LedIdx < LED_NUM_OF_LEDS)
 20a:	c3 30       	cpi	r28, 0x03	; 3
 20c:	61 f7       	brne	.-40     	; 0x1e6 <Led_Init+0x16>
		}
			
		LedIdx++;
	}
	
	if (RetVal == STD_OK)
 20e:	d1 11       	cpse	r29, r1
 210:	02 c0       	rjmp	.+4      	; 0x216 <Led_Init+0x46>
	{
		LedInitState = LED_INITALIZED;
 212:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <LedInitState>
	}
	
	return RetVal;
}
 216:	8d 2f       	mov	r24, r29
 218:	df 91       	pop	r29
 21a:	cf 91       	pop	r28
 21c:	1f 91       	pop	r17
 21e:	0f 91       	pop	r16
 220:	ff 90       	pop	r15
 222:	08 95       	ret

00000224 <Sw_Init>:
typedef enum {SW_ONCE_RELEASED = 0u , SW_ONCE_PRESSED , SW_ONCE_POST_PRESSED}Sw_StateOnceTyp;
static Sw_InitTyp SwInitState = SW_UNINITIALIZED ;
static boolean SwValue [SW_NUM_OF_SW] = {0};
	
Std_RetTyp Sw_Init(void)
{
 224:	ac e6       	ldi	r26, 0x6C	; 108
 226:	b0 e0       	ldi	r27, 0x00	; 0
 228:	eb e9       	ldi	r30, 0x9B	; 155
 22a:	f0 e0       	ldi	r31, 0x00	; 0
 22c:	2e e9       	ldi	r18, 0x9E	; 158
 22e:	30 e0       	ldi	r19, 0x00	; 0
		{
			SwValue[SwIdx] = STD_LOW ;
		}
		else
		{
			SwValue[SwIdx] = STD_HIGH;
 230:	91 e0       	ldi	r25, 0x01	; 1
	Std_RetTyp RetVal = STD_OK;
	uint8 SwIdx = 0u;
	
	while (SwIdx < SW_NUM_OF_SW)
	{
		if (STD_ACTIVE_HIGH == Sw_CfgArr[SwIdx].ActiveState)
 232:	11 96       	adiw	r26, 0x01	; 1
 234:	8c 91       	ld	r24, X
 236:	11 97       	sbiw	r26, 0x01	; 1
 238:	81 30       	cpi	r24, 0x01	; 1
 23a:	11 f4       	brne	.+4      	; 0x240 <Sw_Init+0x1c>
		{
			SwValue[SwIdx] = STD_LOW ;
 23c:	10 82       	st	Z, r1
 23e:	01 c0       	rjmp	.+2      	; 0x242 <Sw_Init+0x1e>
		}
		else
		{
			SwValue[SwIdx] = STD_HIGH;
 240:	90 83       	st	Z, r25
 242:	12 96       	adiw	r26, 0x02	; 2
 244:	31 96       	adiw	r30, 0x01	; 1
Std_RetTyp Sw_Init(void)
{
	Std_RetTyp RetVal = STD_OK;
	uint8 SwIdx = 0u;
	
	while (SwIdx < SW_NUM_OF_SW)
 246:	e2 17       	cp	r30, r18
 248:	f3 07       	cpc	r31, r19
 24a:	99 f7       	brne	.-26     	; 0x232 <Sw_Init+0xe>
		}
		
		SwIdx++;
	}
	
	SwInitState = SW_INITALIZED ;
 24c:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <SwInitState>
	
	return RetVal;
}
 250:	80 e0       	ldi	r24, 0x00	; 0
 252:	08 95       	ret

00000254 <Sw_UpdateState_Cyclic>:


Std_RetTyp Sw_UpdateState_Cyclic(void)
{
 254:	6f 92       	push	r6
 256:	7f 92       	push	r7
 258:	8f 92       	push	r8
 25a:	9f 92       	push	r9
 25c:	af 92       	push	r10
 25e:	bf 92       	push	r11
 260:	cf 92       	push	r12
 262:	df 92       	push	r13
 264:	ef 92       	push	r14
 266:	ff 92       	push	r15
 268:	0f 93       	push	r16
 26a:	1f 93       	push	r17
 26c:	cf 93       	push	r28
 26e:	df 93       	push	r29
 270:	1f 92       	push	r1
 272:	cd b7       	in	r28, 0x3d	; 61
 274:	de b7       	in	r29, 0x3e	; 62
	Std_RetTyp RetVal = STD_OK;
	const Sw_SwTyp * CfgPtr = NULL; 
	static Sw_StateTyp SwState [SW_NUM_OF_SW] = {0u};
	uint8 SwIdx = 0u;
	boolean PinState = STD_LOW;
 276:	19 82       	std	Y+1, r1	; 0x01
		
	if (SwInitState != SW_INITALIZED)
 278:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <SwInitState>
 27c:	81 11       	cpse	r24, r1
 27e:	69 c0       	rjmp	.+210    	; 0x352 <Sw_UpdateState_Cyclic+0xfe>
 280:	0f 2e       	mov	r0, r31
 282:	fc e6       	ldi	r31, 0x6C	; 108
 284:	ef 2e       	mov	r14, r31
 286:	f0 e0       	ldi	r31, 0x00	; 0
 288:	ff 2e       	mov	r15, r31
 28a:	f0 2d       	mov	r31, r0
 28c:	08 e9       	ldi	r16, 0x98	; 152
 28e:	10 e0       	ldi	r17, 0x00	; 0
 290:	0f 2e       	mov	r0, r31
 292:	fb e9       	ldi	r31, 0x9B	; 155
 294:	cf 2e       	mov	r12, r31
 296:	f0 e0       	ldi	r31, 0x00	; 0
 298:	df 2e       	mov	r13, r31
 29a:	f0 2d       	mov	r31, r0
 29c:	0f 2e       	mov	r0, r31
 29e:	fb e9       	ldi	r31, 0x9B	; 155
 2a0:	af 2e       	mov	r10, r31
 2a2:	f0 e0       	ldi	r31, 0x00	; 0
 2a4:	bf 2e       	mov	r11, r31
 2a6:	f0 2d       	mov	r31, r0
			CfgPtr = &Sw_CfgArr[SwIdx];
			Dio_Read(CfgPtr->Sw_Id , &PinState);
			
			if (STD_ACTIVE_LOW == CfgPtr->ActiveState)
			{
				PinState = (PinState)? STD_LOW : STD_HIGH ;
 2a8:	99 24       	eor	r9, r9
 2aa:	93 94       	inc	r9
 2ac:	81 2c       	mov	r8, r1
				case SW_PRE_PRESSED:
					SwValue[SwIdx] = STD_LOW ;
					
					if (STD_HIGH == PinState)
					{
						SwState[SwIdx] = SW_PRESSED ;
 2ae:	68 94       	set
 2b0:	77 24       	eor	r7, r7
 2b2:	71 f8       	bld	r7, 1
				case SW_PRESSED:
					SwValue[SwIdx] = STD_HIGH ;
					
					if (STD_LOW == PinState)
					{
						SwState[SwIdx] = SW_PRE_RELEASED ;
 2b4:	0f 2e       	mov	r0, r31
 2b6:	f3 e0       	ldi	r31, 0x03	; 3
 2b8:	6f 2e       	mov	r6, r31
 2ba:	f0 2d       	mov	r31, r0
	else
	{
		while (SwIdx < SW_NUM_OF_SW)
		{
			CfgPtr = &Sw_CfgArr[SwIdx];
			Dio_Read(CfgPtr->Sw_Id , &PinState);
 2bc:	be 01       	movw	r22, r28
 2be:	6f 5f       	subi	r22, 0xFF	; 255
 2c0:	7f 4f       	sbci	r23, 0xFF	; 255
 2c2:	d7 01       	movw	r26, r14
 2c4:	8c 91       	ld	r24, X
 2c6:	0e 94 2a 05 	call	0xa54	; 0xa54 <Dio_Read>
			
			if (STD_ACTIVE_LOW == CfgPtr->ActiveState)
 2ca:	f7 01       	movw	r30, r14
 2cc:	81 81       	ldd	r24, Z+1	; 0x01
 2ce:	81 11       	cpse	r24, r1
 2d0:	05 c0       	rjmp	.+10     	; 0x2dc <Sw_UpdateState_Cyclic+0x88>
			{
				PinState = (PinState)? STD_LOW : STD_HIGH ;
 2d2:	89 2d       	mov	r24, r9
 2d4:	99 81       	ldd	r25, Y+1	; 0x01
 2d6:	91 11       	cpse	r25, r1
 2d8:	88 2d       	mov	r24, r8
 2da:	89 83       	std	Y+1, r24	; 0x01
 2dc:	f8 01       	movw	r30, r16
			}
			
			switch (SwState[SwIdx])
 2de:	80 81       	ld	r24, Z
 2e0:	81 30       	cpi	r24, 0x01	; 1
 2e2:	69 f0       	breq	.+26     	; 0x2fe <Sw_UpdateState_Cyclic+0xaa>
 2e4:	28 f0       	brcs	.+10     	; 0x2f0 <Sw_UpdateState_Cyclic+0x9c>
 2e6:	82 30       	cpi	r24, 0x02	; 2
 2e8:	a9 f0       	breq	.+42     	; 0x314 <Sw_UpdateState_Cyclic+0xc0>
 2ea:	83 30       	cpi	r24, 0x03	; 3
 2ec:	d1 f0       	breq	.+52     	; 0x322 <Sw_UpdateState_Cyclic+0xce>
 2ee:	23 c0       	rjmp	.+70     	; 0x336 <Sw_UpdateState_Cyclic+0xe2>
			{
				case SW_RELEASED:
					SwValue[SwIdx] = STD_LOW ;
 2f0:	d6 01       	movw	r26, r12
 2f2:	1c 92       	st	X, r1
					
					if (STD_HIGH == PinState)
 2f4:	89 81       	ldd	r24, Y+1	; 0x01
 2f6:	81 30       	cpi	r24, 0x01	; 1
 2f8:	f1 f4       	brne	.+60     	; 0x336 <Sw_UpdateState_Cyclic+0xe2>
					{
						SwState[SwIdx] = SW_PRE_PRESSED ;
 2fa:	90 82       	st	Z, r9
 2fc:	1c c0       	rjmp	.+56     	; 0x336 <Sw_UpdateState_Cyclic+0xe2>
					}
				break;
					
				case SW_PRE_PRESSED:
					SwValue[SwIdx] = STD_LOW ;
 2fe:	d6 01       	movw	r26, r12
 300:	1c 92       	st	X, r1
					
					if (STD_HIGH == PinState)
 302:	89 81       	ldd	r24, Y+1	; 0x01
 304:	81 30       	cpi	r24, 0x01	; 1
 306:	11 f4       	brne	.+4      	; 0x30c <Sw_UpdateState_Cyclic+0xb8>
					{
						SwState[SwIdx] = SW_PRESSED ;
 308:	70 82       	st	Z, r7
 30a:	15 c0       	rjmp	.+42     	; 0x336 <Sw_UpdateState_Cyclic+0xe2>
					}
					else if (STD_LOW == PinState)
 30c:	81 11       	cpse	r24, r1
 30e:	13 c0       	rjmp	.+38     	; 0x336 <Sw_UpdateState_Cyclic+0xe2>
					{
						SwState[SwIdx] = SW_RELEASED ;
 310:	10 82       	st	Z, r1
 312:	11 c0       	rjmp	.+34     	; 0x336 <Sw_UpdateState_Cyclic+0xe2>
					}
				break;
					
				case SW_PRESSED:
					SwValue[SwIdx] = STD_HIGH ;
 314:	d6 01       	movw	r26, r12
 316:	9c 92       	st	X, r9
					
					if (STD_LOW == PinState)
 318:	89 81       	ldd	r24, Y+1	; 0x01
 31a:	81 11       	cpse	r24, r1
 31c:	0c c0       	rjmp	.+24     	; 0x336 <Sw_UpdateState_Cyclic+0xe2>
					{
						SwState[SwIdx] = SW_PRE_RELEASED ;
 31e:	60 82       	st	Z, r6
 320:	0a c0       	rjmp	.+20     	; 0x336 <Sw_UpdateState_Cyclic+0xe2>
					}
				break;
					
				case SW_PRE_RELEASED:
					SwValue[SwIdx] = STD_HIGH ;
 322:	d6 01       	movw	r26, r12
 324:	9c 92       	st	X, r9
					
					if (STD_HIGH == PinState)
 326:	89 81       	ldd	r24, Y+1	; 0x01
 328:	81 30       	cpi	r24, 0x01	; 1
 32a:	11 f4       	brne	.+4      	; 0x330 <Sw_UpdateState_Cyclic+0xdc>
					{
						SwState[SwIdx] = SW_PRESSED ;
 32c:	70 82       	st	Z, r7
 32e:	03 c0       	rjmp	.+6      	; 0x336 <Sw_UpdateState_Cyclic+0xe2>
					}
					else if (STD_LOW == PinState)
 330:	81 11       	cpse	r24, r1
 332:	01 c0       	rjmp	.+2      	; 0x336 <Sw_UpdateState_Cyclic+0xe2>
					{
						SwState[SwIdx] = SW_RELEASED ;
 334:	10 82       	st	Z, r1
 336:	b2 e0       	ldi	r27, 0x02	; 2
 338:	eb 0e       	add	r14, r27
 33a:	f1 1c       	adc	r15, r1
 33c:	0f 5f       	subi	r16, 0xFF	; 255
 33e:	1f 4f       	sbci	r17, 0xFF	; 255
 340:	ef ef       	ldi	r30, 0xFF	; 255
 342:	ce 1a       	sub	r12, r30
 344:	de 0a       	sbc	r13, r30
	{
		RetVal = STD_NOT_OK;
	} 
	else
	{
		while (SwIdx < SW_NUM_OF_SW)
 346:	0a 15       	cp	r16, r10
 348:	1b 05       	cpc	r17, r11
 34a:	09 f0       	breq	.+2      	; 0x34e <Sw_UpdateState_Cyclic+0xfa>
 34c:	b7 cf       	rjmp	.-146    	; 0x2bc <Sw_UpdateState_Cyclic+0x68>
}


Std_RetTyp Sw_UpdateState_Cyclic(void)
{
	Std_RetTyp RetVal = STD_OK;
 34e:	80 e0       	ldi	r24, 0x00	; 0
 350:	01 c0       	rjmp	.+2      	; 0x354 <Sw_UpdateState_Cyclic+0x100>
	uint8 SwIdx = 0u;
	boolean PinState = STD_LOW;
		
	if (SwInitState != SW_INITALIZED)
	{
		RetVal = STD_NOT_OK;
 352:	81 e0       	ldi	r24, 0x01	; 1
			SwIdx++;
		}
	}
	
	return RetVal;
}
 354:	0f 90       	pop	r0
 356:	df 91       	pop	r29
 358:	cf 91       	pop	r28
 35a:	1f 91       	pop	r17
 35c:	0f 91       	pop	r16
 35e:	ff 90       	pop	r15
 360:	ef 90       	pop	r14
 362:	df 90       	pop	r13
 364:	cf 90       	pop	r12
 366:	bf 90       	pop	r11
 368:	af 90       	pop	r10
 36a:	9f 90       	pop	r9
 36c:	8f 90       	pop	r8
 36e:	7f 90       	pop	r7
 370:	6f 90       	pop	r6
 372:	08 95       	ret

00000374 <Sw_GetState>:

Std_RetTyp Sw_GetState (Sw_SwIdTyp SwId , boolean* SwState)
{
	Std_RetTyp RetVal = STD_OK;

	if (SwId >= SW_NUM_OF_SW || SwInitState != SW_INITALIZED)
 374:	83 30       	cpi	r24, 0x03	; 3
 376:	68 f4       	brcc	.+26     	; 0x392 <Sw_GetState+0x1e>
 378:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <SwInitState>
 37c:	91 11       	cpse	r25, r1
 37e:	0b c0       	rjmp	.+22     	; 0x396 <Sw_GetState+0x22>
	{
		RetVal = STD_NOT_OK;
	} 
	else
	{
		*SwState = SwValue[SwId];
 380:	e8 2f       	mov	r30, r24
 382:	f0 e0       	ldi	r31, 0x00	; 0
 384:	e5 56       	subi	r30, 0x65	; 101
 386:	ff 4f       	sbci	r31, 0xFF	; 255
 388:	80 81       	ld	r24, Z
 38a:	fb 01       	movw	r30, r22
 38c:	80 83       	st	Z, r24
}


Std_RetTyp Sw_GetState (Sw_SwIdTyp SwId , boolean* SwState)
{
	Std_RetTyp RetVal = STD_OK;
 38e:	80 e0       	ldi	r24, 0x00	; 0
 390:	08 95       	ret

	if (SwId >= SW_NUM_OF_SW || SwInitState != SW_INITALIZED)
	{
		RetVal = STD_NOT_OK;
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	08 95       	ret
 396:	81 e0       	ldi	r24, 0x01	; 1
	{
		*SwState = SwValue[SwId];
	}
	
	return RetVal;
}
 398:	08 95       	ret

0000039a <main>:
volatile uint16 u16Counter_1ms = 0 ;
volatile uint16 u16Counter_500us = 0;

int main(void)
{
	Task_Init();
 39a:	0e 94 d6 05 	call	0xbac	; 0xbac <Task_Init>
			if (u16Counter_1ms % 10 == 0)
			{
				Task_10ms();
			}
			
			if (u16Counter_1ms % 20 == 0)
 39e:	0f 2e       	mov	r0, r31
 3a0:	f4 e1       	ldi	r31, 0x14	; 20
 3a2:	af 2e       	mov	r10, r31
 3a4:	f0 2d       	mov	r31, r0
			{
				Task_20ms();
			}
			
			if (u16Counter_1ms % 50 == 0)
 3a6:	0f 2e       	mov	r0, r31
 3a8:	f2 e3       	ldi	r31, 0x32	; 50
 3aa:	bf 2e       	mov	r11, r31
 3ac:	f0 2d       	mov	r31, r0
			{
				Task_50ms();
			}
			
			if (u16Counter_1ms % 100 == 0)
 3ae:	0f 2e       	mov	r0, r31
 3b0:	f4 e6       	ldi	r31, 0x64	; 100
 3b2:	cf 2e       	mov	r12, r31
 3b4:	f0 2d       	mov	r31, r0
			{
				Task_100ms();
			}
			
			if (u16Counter_1ms % 200 == 0)
 3b6:	0f 2e       	mov	r0, r31
 3b8:	f8 ec       	ldi	r31, 0xC8	; 200
 3ba:	df 2e       	mov	r13, r31
 3bc:	f0 2d       	mov	r31, r0
			{
				Task_200ms();
			}
			
			if (u16Counter_1ms % 500 == 0)
 3be:	0f 2e       	mov	r0, r31
 3c0:	f4 ef       	ldi	r31, 0xF4	; 244
 3c2:	ef 2e       	mov	r14, r31
 3c4:	ff 24       	eor	r15, r15
 3c6:	f3 94       	inc	r15
 3c8:	f0 2d       	mov	r31, r0
			{
				Task_500ms();
			}
			
			if (u16Counter_1ms % 1000 == 0)
 3ca:	08 ee       	ldi	r16, 0xE8	; 232
 3cc:	13 e0       	ldi	r17, 0x03	; 3
			{
				Task_1000ms();
			}
			
			if (u16Counter_1ms % 2000 == 0)
 3ce:	c0 ed       	ldi	r28, 0xD0	; 208
 3d0:	d7 e0       	ldi	r29, 0x07	; 7
	Task_Init();
	
    while (1) 
    {

		if (u8IsTickCountersUpdated == STD_TRUE)
 3d2:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <u8IsTickCountersUpdated>
 3d6:	81 30       	cpi	r24, 0x01	; 1
 3d8:	e1 f7       	brne	.-8      	; 0x3d2 <main+0x38>
		{
			u8IsTickCountersUpdated = STD_FALSE;
 3da:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <u8IsTickCountersUpdated>

			if (u16Counter_500us % 1 == 0)
 3de:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <u16Counter_500us>
 3e2:	90 91 9f 00 	lds	r25, 0x009F	; 0x80009f <u16Counter_500us+0x1>
			{
				Task_500us();
 3e6:	0e 94 e7 05 	call	0xbce	; 0xbce <Task_500us>
			}
			
			if (u16Counter_1ms % 1 == 0)
 3ea:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <u16Counter_1ms>
 3ee:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <u16Counter_1ms+0x1>
			{
				Task_1ms();
 3f2:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <Task_1ms>
			}
			
			if (u16Counter_1ms % 2 == 0)
 3f6:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <u16Counter_1ms>
 3fa:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <u16Counter_1ms+0x1>
 3fe:	80 ff       	sbrs	r24, 0
			{
				Task_2ms();
 400:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <Task_2ms>
			}
			
			if (u16Counter_1ms % 5 == 0)
 404:	40 91 a0 00 	lds	r20, 0x00A0	; 0x8000a0 <u16Counter_1ms>
 408:	50 91 a1 00 	lds	r21, 0x00A1	; 0x8000a1 <u16Counter_1ms+0x1>
 40c:	9a 01       	movw	r18, r20
 40e:	ad ec       	ldi	r26, 0xCD	; 205
 410:	bc ec       	ldi	r27, 0xCC	; 204
 412:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <__umulhisi3>
 416:	96 95       	lsr	r25
 418:	87 95       	ror	r24
 41a:	96 95       	lsr	r25
 41c:	87 95       	ror	r24
 41e:	9c 01       	movw	r18, r24
 420:	22 0f       	add	r18, r18
 422:	33 1f       	adc	r19, r19
 424:	22 0f       	add	r18, r18
 426:	33 1f       	adc	r19, r19
 428:	82 0f       	add	r24, r18
 42a:	93 1f       	adc	r25, r19
 42c:	48 17       	cp	r20, r24
 42e:	59 07       	cpc	r21, r25
 430:	11 f4       	brne	.+4      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
			{
				Task_5ms();
 432:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <Task_5ms>
			}

			if (u16Counter_1ms % 10 == 0)
 436:	40 91 a0 00 	lds	r20, 0x00A0	; 0x8000a0 <u16Counter_1ms>
 43a:	50 91 a1 00 	lds	r21, 0x00A1	; 0x8000a1 <u16Counter_1ms+0x1>
 43e:	9a 01       	movw	r18, r20
 440:	ad ec       	ldi	r26, 0xCD	; 205
 442:	bc ec       	ldi	r27, 0xCC	; 204
 444:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <__umulhisi3>
 448:	96 95       	lsr	r25
 44a:	87 95       	ror	r24
 44c:	96 95       	lsr	r25
 44e:	87 95       	ror	r24
 450:	96 95       	lsr	r25
 452:	87 95       	ror	r24
 454:	9c 01       	movw	r18, r24
 456:	22 0f       	add	r18, r18
 458:	33 1f       	adc	r19, r19
 45a:	88 0f       	add	r24, r24
 45c:	99 1f       	adc	r25, r25
 45e:	88 0f       	add	r24, r24
 460:	99 1f       	adc	r25, r25
 462:	88 0f       	add	r24, r24
 464:	99 1f       	adc	r25, r25
 466:	82 0f       	add	r24, r18
 468:	93 1f       	adc	r25, r19
 46a:	48 17       	cp	r20, r24
 46c:	59 07       	cpc	r21, r25
 46e:	11 f4       	brne	.+4      	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
			{
				Task_10ms();
 470:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <Task_10ms>
			}
			
			if (u16Counter_1ms % 20 == 0)
 474:	40 91 a0 00 	lds	r20, 0x00A0	; 0x8000a0 <u16Counter_1ms>
 478:	50 91 a1 00 	lds	r21, 0x00A1	; 0x8000a1 <u16Counter_1ms+0x1>
 47c:	9a 01       	movw	r18, r20
 47e:	ad ec       	ldi	r26, 0xCD	; 205
 480:	bc ec       	ldi	r27, 0xCC	; 204
 482:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <__umulhisi3>
 486:	92 95       	swap	r25
 488:	82 95       	swap	r24
 48a:	8f 70       	andi	r24, 0x0F	; 15
 48c:	89 27       	eor	r24, r25
 48e:	9f 70       	andi	r25, 0x0F	; 15
 490:	89 27       	eor	r24, r25
 492:	a8 9e       	mul	r10, r24
 494:	90 01       	movw	r18, r0
 496:	a9 9e       	mul	r10, r25
 498:	30 0d       	add	r19, r0
 49a:	11 24       	eor	r1, r1
 49c:	42 17       	cp	r20, r18
 49e:	53 07       	cpc	r21, r19
 4a0:	11 f4       	brne	.+4      	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
			{
				Task_20ms();
 4a2:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <Task_20ms>
			}
			
			if (u16Counter_1ms % 50 == 0)
 4a6:	40 91 a0 00 	lds	r20, 0x00A0	; 0x8000a0 <u16Counter_1ms>
 4aa:	50 91 a1 00 	lds	r21, 0x00A1	; 0x8000a1 <u16Counter_1ms+0x1>
 4ae:	9a 01       	movw	r18, r20
 4b0:	36 95       	lsr	r19
 4b2:	27 95       	ror	r18
 4b4:	ab e7       	ldi	r26, 0x7B	; 123
 4b6:	b4 e1       	ldi	r27, 0x14	; 20
 4b8:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <__umulhisi3>
 4bc:	96 95       	lsr	r25
 4be:	87 95       	ror	r24
 4c0:	b8 9e       	mul	r11, r24
 4c2:	90 01       	movw	r18, r0
 4c4:	b9 9e       	mul	r11, r25
 4c6:	30 0d       	add	r19, r0
 4c8:	11 24       	eor	r1, r1
 4ca:	42 17       	cp	r20, r18
 4cc:	53 07       	cpc	r21, r19
 4ce:	11 f4       	brne	.+4      	; 0x4d4 <__EEPROM_REGION_LENGTH__+0xd4>
			{
				Task_50ms();
 4d0:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <Task_50ms>
			}
			
			if (u16Counter_1ms % 100 == 0)
 4d4:	40 91 a0 00 	lds	r20, 0x00A0	; 0x8000a0 <u16Counter_1ms>
 4d8:	50 91 a1 00 	lds	r21, 0x00A1	; 0x8000a1 <u16Counter_1ms+0x1>
 4dc:	9a 01       	movw	r18, r20
 4de:	36 95       	lsr	r19
 4e0:	27 95       	ror	r18
 4e2:	36 95       	lsr	r19
 4e4:	27 95       	ror	r18
 4e6:	ab e7       	ldi	r26, 0x7B	; 123
 4e8:	b4 e1       	ldi	r27, 0x14	; 20
 4ea:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <__umulhisi3>
 4ee:	96 95       	lsr	r25
 4f0:	87 95       	ror	r24
 4f2:	c8 9e       	mul	r12, r24
 4f4:	90 01       	movw	r18, r0
 4f6:	c9 9e       	mul	r12, r25
 4f8:	30 0d       	add	r19, r0
 4fa:	11 24       	eor	r1, r1
 4fc:	42 17       	cp	r20, r18
 4fe:	53 07       	cpc	r21, r19
 500:	11 f4       	brne	.+4      	; 0x506 <__EEPROM_REGION_LENGTH__+0x106>
			{
				Task_100ms();
 502:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <Task_100ms>
			}
			
			if (u16Counter_1ms % 200 == 0)
 506:	40 91 a0 00 	lds	r20, 0x00A0	; 0x8000a0 <u16Counter_1ms>
 50a:	50 91 a1 00 	lds	r21, 0x00A1	; 0x8000a1 <u16Counter_1ms+0x1>
 50e:	9a 01       	movw	r18, r20
 510:	36 95       	lsr	r19
 512:	27 95       	ror	r18
 514:	36 95       	lsr	r19
 516:	27 95       	ror	r18
 518:	36 95       	lsr	r19
 51a:	27 95       	ror	r18
 51c:	ab e7       	ldi	r26, 0x7B	; 123
 51e:	b4 e1       	ldi	r27, 0x14	; 20
 520:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <__umulhisi3>
 524:	96 95       	lsr	r25
 526:	87 95       	ror	r24
 528:	d8 9e       	mul	r13, r24
 52a:	90 01       	movw	r18, r0
 52c:	d9 9e       	mul	r13, r25
 52e:	30 0d       	add	r19, r0
 530:	11 24       	eor	r1, r1
 532:	42 17       	cp	r20, r18
 534:	53 07       	cpc	r21, r19
 536:	11 f4       	brne	.+4      	; 0x53c <__EEPROM_REGION_LENGTH__+0x13c>
			{
				Task_200ms();
 538:	0e 94 f5 05 	call	0xbea	; 0xbea <Task_200ms>
			}
			
			if (u16Counter_1ms % 500 == 0)
 53c:	40 91 a0 00 	lds	r20, 0x00A0	; 0x8000a0 <u16Counter_1ms>
 540:	50 91 a1 00 	lds	r21, 0x00A1	; 0x8000a1 <u16Counter_1ms+0x1>
 544:	9a 01       	movw	r18, r20
 546:	36 95       	lsr	r19
 548:	27 95       	ror	r18
 54a:	36 95       	lsr	r19
 54c:	27 95       	ror	r18
 54e:	a5 ec       	ldi	r26, 0xC5	; 197
 550:	b0 e2       	ldi	r27, 0x20	; 32
 552:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <__umulhisi3>
 556:	92 95       	swap	r25
 558:	82 95       	swap	r24
 55a:	8f 70       	andi	r24, 0x0F	; 15
 55c:	89 27       	eor	r24, r25
 55e:	9f 70       	andi	r25, 0x0F	; 15
 560:	89 27       	eor	r24, r25
 562:	8e 9d       	mul	r24, r14
 564:	90 01       	movw	r18, r0
 566:	8f 9d       	mul	r24, r15
 568:	30 0d       	add	r19, r0
 56a:	9e 9d       	mul	r25, r14
 56c:	30 0d       	add	r19, r0
 56e:	11 24       	eor	r1, r1
 570:	42 17       	cp	r20, r18
 572:	53 07       	cpc	r21, r19
 574:	11 f4       	brne	.+4      	; 0x57a <__EEPROM_REGION_LENGTH__+0x17a>
			{
				Task_500ms();
 576:	0e 94 f6 05 	call	0xbec	; 0xbec <Task_500ms>
			}
			
			if (u16Counter_1ms % 1000 == 0)
 57a:	40 91 a0 00 	lds	r20, 0x00A0	; 0x8000a0 <u16Counter_1ms>
 57e:	50 91 a1 00 	lds	r21, 0x00A1	; 0x8000a1 <u16Counter_1ms+0x1>
 582:	9a 01       	movw	r18, r20
 584:	36 95       	lsr	r19
 586:	27 95       	ror	r18
 588:	36 95       	lsr	r19
 58a:	27 95       	ror	r18
 58c:	36 95       	lsr	r19
 58e:	27 95       	ror	r18
 590:	a5 ec       	ldi	r26, 0xC5	; 197
 592:	b0 e2       	ldi	r27, 0x20	; 32
 594:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <__umulhisi3>
 598:	92 95       	swap	r25
 59a:	82 95       	swap	r24
 59c:	8f 70       	andi	r24, 0x0F	; 15
 59e:	89 27       	eor	r24, r25
 5a0:	9f 70       	andi	r25, 0x0F	; 15
 5a2:	89 27       	eor	r24, r25
 5a4:	80 9f       	mul	r24, r16
 5a6:	90 01       	movw	r18, r0
 5a8:	81 9f       	mul	r24, r17
 5aa:	30 0d       	add	r19, r0
 5ac:	90 9f       	mul	r25, r16
 5ae:	30 0d       	add	r19, r0
 5b0:	11 24       	eor	r1, r1
 5b2:	42 17       	cp	r20, r18
 5b4:	53 07       	cpc	r21, r19
 5b6:	11 f4       	brne	.+4      	; 0x5bc <__EEPROM_REGION_LENGTH__+0x1bc>
			{
				Task_1000ms();
 5b8:	0e 94 f7 05 	call	0xbee	; 0xbee <Task_1000ms>
			}
			
			if (u16Counter_1ms % 2000 == 0)
 5bc:	40 91 a0 00 	lds	r20, 0x00A0	; 0x8000a0 <u16Counter_1ms>
 5c0:	50 91 a1 00 	lds	r21, 0x00A1	; 0x8000a1 <u16Counter_1ms+0x1>
 5c4:	9a 01       	movw	r18, r20
 5c6:	32 95       	swap	r19
 5c8:	22 95       	swap	r18
 5ca:	2f 70       	andi	r18, 0x0F	; 15
 5cc:	23 27       	eor	r18, r19
 5ce:	3f 70       	andi	r19, 0x0F	; 15
 5d0:	23 27       	eor	r18, r19
 5d2:	a3 e6       	ldi	r26, 0x63	; 99
 5d4:	b0 e1       	ldi	r27, 0x10	; 16
 5d6:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <__umulhisi3>
 5da:	96 95       	lsr	r25
 5dc:	87 95       	ror	r24
 5de:	96 95       	lsr	r25
 5e0:	87 95       	ror	r24
 5e2:	96 95       	lsr	r25
 5e4:	87 95       	ror	r24
 5e6:	8c 9f       	mul	r24, r28
 5e8:	90 01       	movw	r18, r0
 5ea:	8d 9f       	mul	r24, r29
 5ec:	30 0d       	add	r19, r0
 5ee:	9c 9f       	mul	r25, r28
 5f0:	30 0d       	add	r19, r0
 5f2:	11 24       	eor	r1, r1
 5f4:	42 17       	cp	r20, r18
 5f6:	53 07       	cpc	r21, r19
 5f8:	09 f0       	breq	.+2      	; 0x5fc <__EEPROM_REGION_LENGTH__+0x1fc>
 5fa:	eb ce       	rjmp	.-554    	; 0x3d2 <main+0x38>
			{
				Task_2000ms();
 5fc:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <Task_2000ms>
 600:	e8 ce       	rjmp	.-560    	; 0x3d2 <main+0x38>

00000602 <Timer0_500us_Cbk>:
}


void Timer0_500us_Cbk(void)
{
	u8IsTickCountersUpdated = STD_TRUE;
 602:	81 e0       	ldi	r24, 0x01	; 1
 604:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <u8IsTickCountersUpdated>
	static boolean IsPeriod_1ms = STD_TRUE;
	
	IsPeriod_1ms = !IsPeriod_1ms;
 608:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <IsPeriod_1ms.1950>
 60c:	91 e0       	ldi	r25, 0x01	; 1
 60e:	81 11       	cpse	r24, r1
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <IsPeriod_1ms.1950>

	if (IsPeriod_1ms == STD_TRUE)
 616:	81 11       	cpse	r24, r1
 618:	14 c0       	rjmp	.+40     	; 0x642 <Timer0_500us_Cbk+0x40>
	{
		u16Counter_1ms++;
 61a:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <u16Counter_1ms>
 61e:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <u16Counter_1ms+0x1>
 622:	01 96       	adiw	r24, 0x01	; 1
 624:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <u16Counter_1ms+0x1>
 628:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <u16Counter_1ms>

		if (u16Counter_1ms == 2000u)
 62c:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <u16Counter_1ms>
 630:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <u16Counter_1ms+0x1>
 634:	80 3d       	cpi	r24, 0xD0	; 208
 636:	97 40       	sbci	r25, 0x07	; 7
 638:	21 f4       	brne	.+8      	; 0x642 <Timer0_500us_Cbk+0x40>
		{
			u16Counter_1ms = 0u;
 63a:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <u16Counter_1ms+0x1>
 63e:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <u16Counter_1ms>
		}
	}
	
	u16Counter_500us = (u16Counter_500us+1)%2;
 642:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <u16Counter_500us>
 646:	90 91 9f 00 	lds	r25, 0x009F	; 0x80009f <u16Counter_500us+0x1>
 64a:	01 96       	adiw	r24, 0x01	; 1
 64c:	81 70       	andi	r24, 0x01	; 1
 64e:	99 27       	eor	r25, r25
 650:	90 93 9f 00 	sts	0x009F, r25	; 0x80009f <u16Counter_500us+0x1>
 654:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <u16Counter_500us>
 658:	08 95       	ret

0000065a <Dio_SetDir>:
        RetVal = STD_NOT_OK;
    }
    else
#endif
    {
        CfgPtr = &Dio_CfgArr[ChannelId];
 65a:	90 e0       	ldi	r25, 0x00	; 0
            RetVal = STD_NOT_OK;
        }
        else
#endif
        {
            switch(CfgPtr->PinPort)
 65c:	fc 01       	movw	r30, r24
 65e:	ee 0f       	add	r30, r30
 660:	ff 1f       	adc	r31, r31
 662:	ee 0f       	add	r30, r30
 664:	ff 1f       	adc	r31, r31
 666:	e8 0f       	add	r30, r24
 668:	f9 1f       	adc	r31, r25
 66a:	ee 58       	subi	r30, 0x8E	; 142
 66c:	ff 4f       	sbci	r31, 0xFF	; 255
 66e:	20 81       	ld	r18, Z
 670:	21 30       	cpi	r18, 0x01	; 1
 672:	09 f4       	brne	.+2      	; 0x676 <Dio_SetDir+0x1c>
 674:	3f c0       	rjmp	.+126    	; 0x6f4 <Dio_SetDir+0x9a>
 676:	38 f0       	brcs	.+14     	; 0x686 <Dio_SetDir+0x2c>
 678:	22 30       	cpi	r18, 0x02	; 2
 67a:	09 f4       	brne	.+2      	; 0x67e <Dio_SetDir+0x24>
 67c:	72 c0       	rjmp	.+228    	; 0x762 <Dio_SetDir+0x108>
 67e:	23 30       	cpi	r18, 0x03	; 3
 680:	09 f4       	brne	.+2      	; 0x684 <Dio_SetDir+0x2a>
 682:	a6 c0       	rjmp	.+332    	; 0x7d0 <Dio_SetDir+0x176>
 684:	dc c0       	rjmp	.+440    	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
            {
                case PORT_A:
                {
                    if (STD_OUTPUT == CfgPtr->PinDir) STD_SET_BIT(DDRA,CfgPtr->PinNum);
 686:	fc 01       	movw	r30, r24
 688:	ee 0f       	add	r30, r30
 68a:	ff 1f       	adc	r31, r31
 68c:	ee 0f       	add	r30, r30
 68e:	ff 1f       	adc	r31, r31
 690:	e8 0f       	add	r30, r24
 692:	f9 1f       	adc	r31, r25
 694:	ee 58       	subi	r30, 0x8E	; 142
 696:	ff 4f       	sbci	r31, 0xFF	; 255
 698:	22 81       	ldd	r18, Z+2	; 0x02
 69a:	21 30       	cpi	r18, 0x01	; 1
 69c:	a9 f4       	brne	.+42     	; 0x6c8 <Dio_SetDir+0x6e>
 69e:	2a b3       	in	r18, 0x1a	; 26
 6a0:	fc 01       	movw	r30, r24
 6a2:	ee 0f       	add	r30, r30
 6a4:	ff 1f       	adc	r31, r31
 6a6:	ee 0f       	add	r30, r30
 6a8:	ff 1f       	adc	r31, r31
 6aa:	e8 0f       	add	r30, r24
 6ac:	f9 1f       	adc	r31, r25
 6ae:	ee 58       	subi	r30, 0x8E	; 142
 6b0:	ff 4f       	sbci	r31, 0xFF	; 255
 6b2:	81 e0       	ldi	r24, 0x01	; 1
 6b4:	90 e0       	ldi	r25, 0x00	; 0
 6b6:	01 80       	ldd	r0, Z+1	; 0x01
 6b8:	02 c0       	rjmp	.+4      	; 0x6be <Dio_SetDir+0x64>
 6ba:	88 0f       	add	r24, r24
 6bc:	99 1f       	adc	r25, r25
 6be:	0a 94       	dec	r0
 6c0:	e2 f7       	brpl	.-8      	; 0x6ba <Dio_SetDir+0x60>
 6c2:	82 2b       	or	r24, r18
 6c4:	8a bb       	out	0x1a, r24	; 26
 6c6:	bb c0       	rjmp	.+374    	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
                    else STD_CLR_BIT(DDRA,CfgPtr->PinNum);
 6c8:	2a b3       	in	r18, 0x1a	; 26
 6ca:	fc 01       	movw	r30, r24
 6cc:	ee 0f       	add	r30, r30
 6ce:	ff 1f       	adc	r31, r31
 6d0:	ee 0f       	add	r30, r30
 6d2:	ff 1f       	adc	r31, r31
 6d4:	e8 0f       	add	r30, r24
 6d6:	f9 1f       	adc	r31, r25
 6d8:	ee 58       	subi	r30, 0x8E	; 142
 6da:	ff 4f       	sbci	r31, 0xFF	; 255
 6dc:	81 e0       	ldi	r24, 0x01	; 1
 6de:	90 e0       	ldi	r25, 0x00	; 0
 6e0:	01 80       	ldd	r0, Z+1	; 0x01
 6e2:	02 c0       	rjmp	.+4      	; 0x6e8 <Dio_SetDir+0x8e>
 6e4:	88 0f       	add	r24, r24
 6e6:	99 1f       	adc	r25, r25
 6e8:	0a 94       	dec	r0
 6ea:	e2 f7       	brpl	.-8      	; 0x6e4 <Dio_SetDir+0x8a>
 6ec:	80 95       	com	r24
 6ee:	82 23       	and	r24, r18
 6f0:	8a bb       	out	0x1a, r24	; 26
 6f2:	a5 c0       	rjmp	.+330    	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
                }break;
                case PORT_B:
                {
                    if (STD_OUTPUT == CfgPtr->PinDir) STD_SET_BIT(DDRB,CfgPtr->PinNum);
 6f4:	fc 01       	movw	r30, r24
 6f6:	ee 0f       	add	r30, r30
 6f8:	ff 1f       	adc	r31, r31
 6fa:	ee 0f       	add	r30, r30
 6fc:	ff 1f       	adc	r31, r31
 6fe:	e8 0f       	add	r30, r24
 700:	f9 1f       	adc	r31, r25
 702:	ee 58       	subi	r30, 0x8E	; 142
 704:	ff 4f       	sbci	r31, 0xFF	; 255
 706:	22 81       	ldd	r18, Z+2	; 0x02
 708:	21 30       	cpi	r18, 0x01	; 1
 70a:	a9 f4       	brne	.+42     	; 0x736 <Dio_SetDir+0xdc>
 70c:	27 b3       	in	r18, 0x17	; 23
 70e:	fc 01       	movw	r30, r24
 710:	ee 0f       	add	r30, r30
 712:	ff 1f       	adc	r31, r31
 714:	ee 0f       	add	r30, r30
 716:	ff 1f       	adc	r31, r31
 718:	e8 0f       	add	r30, r24
 71a:	f9 1f       	adc	r31, r25
 71c:	ee 58       	subi	r30, 0x8E	; 142
 71e:	ff 4f       	sbci	r31, 0xFF	; 255
 720:	81 e0       	ldi	r24, 0x01	; 1
 722:	90 e0       	ldi	r25, 0x00	; 0
 724:	01 80       	ldd	r0, Z+1	; 0x01
 726:	02 c0       	rjmp	.+4      	; 0x72c <Dio_SetDir+0xd2>
 728:	88 0f       	add	r24, r24
 72a:	99 1f       	adc	r25, r25
 72c:	0a 94       	dec	r0
 72e:	e2 f7       	brpl	.-8      	; 0x728 <Dio_SetDir+0xce>
 730:	82 2b       	or	r24, r18
 732:	87 bb       	out	0x17, r24	; 23
 734:	84 c0       	rjmp	.+264    	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
                    else STD_CLR_BIT(DDRB,CfgPtr->PinNum);
 736:	27 b3       	in	r18, 0x17	; 23
 738:	fc 01       	movw	r30, r24
 73a:	ee 0f       	add	r30, r30
 73c:	ff 1f       	adc	r31, r31
 73e:	ee 0f       	add	r30, r30
 740:	ff 1f       	adc	r31, r31
 742:	e8 0f       	add	r30, r24
 744:	f9 1f       	adc	r31, r25
 746:	ee 58       	subi	r30, 0x8E	; 142
 748:	ff 4f       	sbci	r31, 0xFF	; 255
 74a:	81 e0       	ldi	r24, 0x01	; 1
 74c:	90 e0       	ldi	r25, 0x00	; 0
 74e:	01 80       	ldd	r0, Z+1	; 0x01
 750:	02 c0       	rjmp	.+4      	; 0x756 <Dio_SetDir+0xfc>
 752:	88 0f       	add	r24, r24
 754:	99 1f       	adc	r25, r25
 756:	0a 94       	dec	r0
 758:	e2 f7       	brpl	.-8      	; 0x752 <Dio_SetDir+0xf8>
 75a:	80 95       	com	r24
 75c:	82 23       	and	r24, r18
 75e:	87 bb       	out	0x17, r24	; 23
 760:	6e c0       	rjmp	.+220    	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
                }break;
                case PORT_C:
                {
                    if (STD_OUTPUT == CfgPtr->PinDir) STD_SET_BIT(DDRC,CfgPtr->PinNum);
 762:	fc 01       	movw	r30, r24
 764:	ee 0f       	add	r30, r30
 766:	ff 1f       	adc	r31, r31
 768:	ee 0f       	add	r30, r30
 76a:	ff 1f       	adc	r31, r31
 76c:	e8 0f       	add	r30, r24
 76e:	f9 1f       	adc	r31, r25
 770:	ee 58       	subi	r30, 0x8E	; 142
 772:	ff 4f       	sbci	r31, 0xFF	; 255
 774:	22 81       	ldd	r18, Z+2	; 0x02
 776:	21 30       	cpi	r18, 0x01	; 1
 778:	a9 f4       	brne	.+42     	; 0x7a4 <Dio_SetDir+0x14a>
 77a:	24 b3       	in	r18, 0x14	; 20
 77c:	fc 01       	movw	r30, r24
 77e:	ee 0f       	add	r30, r30
 780:	ff 1f       	adc	r31, r31
 782:	ee 0f       	add	r30, r30
 784:	ff 1f       	adc	r31, r31
 786:	e8 0f       	add	r30, r24
 788:	f9 1f       	adc	r31, r25
 78a:	ee 58       	subi	r30, 0x8E	; 142
 78c:	ff 4f       	sbci	r31, 0xFF	; 255
 78e:	81 e0       	ldi	r24, 0x01	; 1
 790:	90 e0       	ldi	r25, 0x00	; 0
 792:	01 80       	ldd	r0, Z+1	; 0x01
 794:	02 c0       	rjmp	.+4      	; 0x79a <Dio_SetDir+0x140>
 796:	88 0f       	add	r24, r24
 798:	99 1f       	adc	r25, r25
 79a:	0a 94       	dec	r0
 79c:	e2 f7       	brpl	.-8      	; 0x796 <Dio_SetDir+0x13c>
 79e:	82 2b       	or	r24, r18
 7a0:	84 bb       	out	0x14, r24	; 20
 7a2:	4d c0       	rjmp	.+154    	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
                    else STD_CLR_BIT(DDRC,CfgPtr->PinNum);
 7a4:	24 b3       	in	r18, 0x14	; 20
 7a6:	fc 01       	movw	r30, r24
 7a8:	ee 0f       	add	r30, r30
 7aa:	ff 1f       	adc	r31, r31
 7ac:	ee 0f       	add	r30, r30
 7ae:	ff 1f       	adc	r31, r31
 7b0:	e8 0f       	add	r30, r24
 7b2:	f9 1f       	adc	r31, r25
 7b4:	ee 58       	subi	r30, 0x8E	; 142
 7b6:	ff 4f       	sbci	r31, 0xFF	; 255
 7b8:	81 e0       	ldi	r24, 0x01	; 1
 7ba:	90 e0       	ldi	r25, 0x00	; 0
 7bc:	01 80       	ldd	r0, Z+1	; 0x01
 7be:	02 c0       	rjmp	.+4      	; 0x7c4 <Dio_SetDir+0x16a>
 7c0:	88 0f       	add	r24, r24
 7c2:	99 1f       	adc	r25, r25
 7c4:	0a 94       	dec	r0
 7c6:	e2 f7       	brpl	.-8      	; 0x7c0 <Dio_SetDir+0x166>
 7c8:	80 95       	com	r24
 7ca:	82 23       	and	r24, r18
 7cc:	84 bb       	out	0x14, r24	; 20
 7ce:	37 c0       	rjmp	.+110    	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
                }break;
                case PORT_D:
                {
                    if (STD_OUTPUT == CfgPtr->PinDir) STD_SET_BIT(DDRD,CfgPtr->PinNum);
 7d0:	fc 01       	movw	r30, r24
 7d2:	ee 0f       	add	r30, r30
 7d4:	ff 1f       	adc	r31, r31
 7d6:	ee 0f       	add	r30, r30
 7d8:	ff 1f       	adc	r31, r31
 7da:	e8 0f       	add	r30, r24
 7dc:	f9 1f       	adc	r31, r25
 7de:	ee 58       	subi	r30, 0x8E	; 142
 7e0:	ff 4f       	sbci	r31, 0xFF	; 255
 7e2:	22 81       	ldd	r18, Z+2	; 0x02
 7e4:	21 30       	cpi	r18, 0x01	; 1
 7e6:	a9 f4       	brne	.+42     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 7e8:	21 b3       	in	r18, 0x11	; 17
 7ea:	fc 01       	movw	r30, r24
 7ec:	ee 0f       	add	r30, r30
 7ee:	ff 1f       	adc	r31, r31
 7f0:	ee 0f       	add	r30, r30
 7f2:	ff 1f       	adc	r31, r31
 7f4:	e8 0f       	add	r30, r24
 7f6:	f9 1f       	adc	r31, r25
 7f8:	ee 58       	subi	r30, 0x8E	; 142
 7fa:	ff 4f       	sbci	r31, 0xFF	; 255
 7fc:	81 e0       	ldi	r24, 0x01	; 1
 7fe:	90 e0       	ldi	r25, 0x00	; 0
 800:	01 80       	ldd	r0, Z+1	; 0x01
 802:	02 c0       	rjmp	.+4      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 804:	88 0f       	add	r24, r24
 806:	99 1f       	adc	r25, r25
 808:	0a 94       	dec	r0
 80a:	e2 f7       	brpl	.-8      	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 80c:	82 2b       	or	r24, r18
 80e:	81 bb       	out	0x11, r24	; 17
 810:	16 c0       	rjmp	.+44     	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
                    else STD_CLR_BIT(DDRD,CfgPtr->PinNum);
 812:	21 b3       	in	r18, 0x11	; 17
 814:	fc 01       	movw	r30, r24
 816:	ee 0f       	add	r30, r30
 818:	ff 1f       	adc	r31, r31
 81a:	ee 0f       	add	r30, r30
 81c:	ff 1f       	adc	r31, r31
 81e:	8e 0f       	add	r24, r30
 820:	9f 1f       	adc	r25, r31
 822:	fc 01       	movw	r30, r24
 824:	ee 58       	subi	r30, 0x8E	; 142
 826:	ff 4f       	sbci	r31, 0xFF	; 255
 828:	81 e0       	ldi	r24, 0x01	; 1
 82a:	90 e0       	ldi	r25, 0x00	; 0
 82c:	01 80       	ldd	r0, Z+1	; 0x01
 82e:	02 c0       	rjmp	.+4      	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 830:	88 0f       	add	r24, r24
 832:	99 1f       	adc	r25, r25
 834:	0a 94       	dec	r0
 836:	e2 f7       	brpl	.-8      	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 838:	80 95       	com	r24
 83a:	82 23       	and	r24, r18
 83c:	81 bb       	out	0x11, r24	; 17
        }

    }

    return RetVal;
}
 83e:	80 e0       	ldi	r24, 0x00	; 0
 840:	08 95       	ret

00000842 <Dio_Write>:
        RetVal = STD_NOT_OK;
    }
    else
#endif
    {
        CfgPtr = &Dio_CfgArr[ChannelId];
 842:	90 e0       	ldi	r25, 0x00	; 0
            RetVal = STD_NOT_OK;
        }
        else
#endif
        {
            switch(CfgPtr->PinPort)
 844:	fc 01       	movw	r30, r24
 846:	ee 0f       	add	r30, r30
 848:	ff 1f       	adc	r31, r31
 84a:	ee 0f       	add	r30, r30
 84c:	ff 1f       	adc	r31, r31
 84e:	e8 0f       	add	r30, r24
 850:	f9 1f       	adc	r31, r25
 852:	ee 58       	subi	r30, 0x8E	; 142
 854:	ff 4f       	sbci	r31, 0xFF	; 255
 856:	20 81       	ld	r18, Z
 858:	21 30       	cpi	r18, 0x01	; 1
 85a:	a9 f1       	breq	.+106    	; 0x8c6 <__stack+0x67>
 85c:	38 f0       	brcs	.+14     	; 0x86c <__stack+0xd>
 85e:	22 30       	cpi	r18, 0x02	; 2
 860:	09 f4       	brne	.+2      	; 0x864 <__stack+0x5>
 862:	5e c0       	rjmp	.+188    	; 0x920 <__stack+0xc1>
 864:	23 30       	cpi	r18, 0x03	; 3
 866:	09 f4       	brne	.+2      	; 0x86a <__stack+0xb>
 868:	88 c0       	rjmp	.+272    	; 0x97a <__stack+0x11b>
 86a:	b4 c0       	rjmp	.+360    	; 0x9d4 <__stack+0x175>
            {
                case PORT_A:
                {
                    if (STD_HIGH == u8Value) STD_SET_BIT(PORTA,CfgPtr->PinNum);
 86c:	61 30       	cpi	r22, 0x01	; 1
 86e:	a9 f4       	brne	.+42     	; 0x89a <__stack+0x3b>
 870:	2b b3       	in	r18, 0x1b	; 27
 872:	fc 01       	movw	r30, r24
 874:	ee 0f       	add	r30, r30
 876:	ff 1f       	adc	r31, r31
 878:	ee 0f       	add	r30, r30
 87a:	ff 1f       	adc	r31, r31
 87c:	e8 0f       	add	r30, r24
 87e:	f9 1f       	adc	r31, r25
 880:	ee 58       	subi	r30, 0x8E	; 142
 882:	ff 4f       	sbci	r31, 0xFF	; 255
 884:	81 e0       	ldi	r24, 0x01	; 1
 886:	90 e0       	ldi	r25, 0x00	; 0
 888:	01 80       	ldd	r0, Z+1	; 0x01
 88a:	02 c0       	rjmp	.+4      	; 0x890 <__stack+0x31>
 88c:	88 0f       	add	r24, r24
 88e:	99 1f       	adc	r25, r25
 890:	0a 94       	dec	r0
 892:	e2 f7       	brpl	.-8      	; 0x88c <__stack+0x2d>
 894:	82 2b       	or	r24, r18
 896:	8b bb       	out	0x1b, r24	; 27
 898:	9d c0       	rjmp	.+314    	; 0x9d4 <__stack+0x175>
                    else STD_CLR_BIT(PORTA,CfgPtr->PinNum);
 89a:	2b b3       	in	r18, 0x1b	; 27
 89c:	fc 01       	movw	r30, r24
 89e:	ee 0f       	add	r30, r30
 8a0:	ff 1f       	adc	r31, r31
 8a2:	ee 0f       	add	r30, r30
 8a4:	ff 1f       	adc	r31, r31
 8a6:	e8 0f       	add	r30, r24
 8a8:	f9 1f       	adc	r31, r25
 8aa:	ee 58       	subi	r30, 0x8E	; 142
 8ac:	ff 4f       	sbci	r31, 0xFF	; 255
 8ae:	81 e0       	ldi	r24, 0x01	; 1
 8b0:	90 e0       	ldi	r25, 0x00	; 0
 8b2:	01 80       	ldd	r0, Z+1	; 0x01
 8b4:	02 c0       	rjmp	.+4      	; 0x8ba <__stack+0x5b>
 8b6:	88 0f       	add	r24, r24
 8b8:	99 1f       	adc	r25, r25
 8ba:	0a 94       	dec	r0
 8bc:	e2 f7       	brpl	.-8      	; 0x8b6 <__stack+0x57>
 8be:	80 95       	com	r24
 8c0:	82 23       	and	r24, r18
 8c2:	8b bb       	out	0x1b, r24	; 27
 8c4:	87 c0       	rjmp	.+270    	; 0x9d4 <__stack+0x175>
                }break;
                case PORT_B:
                {
                    if (STD_HIGH == u8Value) STD_SET_BIT(PORTB,CfgPtr->PinNum);
 8c6:	61 30       	cpi	r22, 0x01	; 1
 8c8:	a9 f4       	brne	.+42     	; 0x8f4 <__stack+0x95>
 8ca:	28 b3       	in	r18, 0x18	; 24
 8cc:	fc 01       	movw	r30, r24
 8ce:	ee 0f       	add	r30, r30
 8d0:	ff 1f       	adc	r31, r31
 8d2:	ee 0f       	add	r30, r30
 8d4:	ff 1f       	adc	r31, r31
 8d6:	e8 0f       	add	r30, r24
 8d8:	f9 1f       	adc	r31, r25
 8da:	ee 58       	subi	r30, 0x8E	; 142
 8dc:	ff 4f       	sbci	r31, 0xFF	; 255
 8de:	81 e0       	ldi	r24, 0x01	; 1
 8e0:	90 e0       	ldi	r25, 0x00	; 0
 8e2:	01 80       	ldd	r0, Z+1	; 0x01
 8e4:	02 c0       	rjmp	.+4      	; 0x8ea <__stack+0x8b>
 8e6:	88 0f       	add	r24, r24
 8e8:	99 1f       	adc	r25, r25
 8ea:	0a 94       	dec	r0
 8ec:	e2 f7       	brpl	.-8      	; 0x8e6 <__stack+0x87>
 8ee:	82 2b       	or	r24, r18
 8f0:	88 bb       	out	0x18, r24	; 24
 8f2:	70 c0       	rjmp	.+224    	; 0x9d4 <__stack+0x175>
                    else STD_CLR_BIT(PORTB,CfgPtr->PinNum);
 8f4:	28 b3       	in	r18, 0x18	; 24
 8f6:	fc 01       	movw	r30, r24
 8f8:	ee 0f       	add	r30, r30
 8fa:	ff 1f       	adc	r31, r31
 8fc:	ee 0f       	add	r30, r30
 8fe:	ff 1f       	adc	r31, r31
 900:	e8 0f       	add	r30, r24
 902:	f9 1f       	adc	r31, r25
 904:	ee 58       	subi	r30, 0x8E	; 142
 906:	ff 4f       	sbci	r31, 0xFF	; 255
 908:	81 e0       	ldi	r24, 0x01	; 1
 90a:	90 e0       	ldi	r25, 0x00	; 0
 90c:	01 80       	ldd	r0, Z+1	; 0x01
 90e:	02 c0       	rjmp	.+4      	; 0x914 <__stack+0xb5>
 910:	88 0f       	add	r24, r24
 912:	99 1f       	adc	r25, r25
 914:	0a 94       	dec	r0
 916:	e2 f7       	brpl	.-8      	; 0x910 <__stack+0xb1>
 918:	80 95       	com	r24
 91a:	82 23       	and	r24, r18
 91c:	88 bb       	out	0x18, r24	; 24
 91e:	5a c0       	rjmp	.+180    	; 0x9d4 <__stack+0x175>
                }break;
                case PORT_C:
                {
                    if (STD_HIGH == u8Value) STD_SET_BIT(PORTC,CfgPtr->PinNum);
 920:	61 30       	cpi	r22, 0x01	; 1
 922:	a9 f4       	brne	.+42     	; 0x94e <__stack+0xef>
 924:	25 b3       	in	r18, 0x15	; 21
 926:	fc 01       	movw	r30, r24
 928:	ee 0f       	add	r30, r30
 92a:	ff 1f       	adc	r31, r31
 92c:	ee 0f       	add	r30, r30
 92e:	ff 1f       	adc	r31, r31
 930:	e8 0f       	add	r30, r24
 932:	f9 1f       	adc	r31, r25
 934:	ee 58       	subi	r30, 0x8E	; 142
 936:	ff 4f       	sbci	r31, 0xFF	; 255
 938:	81 e0       	ldi	r24, 0x01	; 1
 93a:	90 e0       	ldi	r25, 0x00	; 0
 93c:	01 80       	ldd	r0, Z+1	; 0x01
 93e:	02 c0       	rjmp	.+4      	; 0x944 <__stack+0xe5>
 940:	88 0f       	add	r24, r24
 942:	99 1f       	adc	r25, r25
 944:	0a 94       	dec	r0
 946:	e2 f7       	brpl	.-8      	; 0x940 <__stack+0xe1>
 948:	82 2b       	or	r24, r18
 94a:	85 bb       	out	0x15, r24	; 21
 94c:	43 c0       	rjmp	.+134    	; 0x9d4 <__stack+0x175>
                    else STD_CLR_BIT(PORTC,CfgPtr->PinNum);
 94e:	25 b3       	in	r18, 0x15	; 21
 950:	fc 01       	movw	r30, r24
 952:	ee 0f       	add	r30, r30
 954:	ff 1f       	adc	r31, r31
 956:	ee 0f       	add	r30, r30
 958:	ff 1f       	adc	r31, r31
 95a:	e8 0f       	add	r30, r24
 95c:	f9 1f       	adc	r31, r25
 95e:	ee 58       	subi	r30, 0x8E	; 142
 960:	ff 4f       	sbci	r31, 0xFF	; 255
 962:	81 e0       	ldi	r24, 0x01	; 1
 964:	90 e0       	ldi	r25, 0x00	; 0
 966:	01 80       	ldd	r0, Z+1	; 0x01
 968:	02 c0       	rjmp	.+4      	; 0x96e <__stack+0x10f>
 96a:	88 0f       	add	r24, r24
 96c:	99 1f       	adc	r25, r25
 96e:	0a 94       	dec	r0
 970:	e2 f7       	brpl	.-8      	; 0x96a <__stack+0x10b>
 972:	80 95       	com	r24
 974:	82 23       	and	r24, r18
 976:	85 bb       	out	0x15, r24	; 21
 978:	2d c0       	rjmp	.+90     	; 0x9d4 <__stack+0x175>
                }break;
                case PORT_D:
                {
                    if (STD_HIGH == u8Value) STD_SET_BIT(PORTD,CfgPtr->PinNum);
 97a:	61 30       	cpi	r22, 0x01	; 1
 97c:	a9 f4       	brne	.+42     	; 0x9a8 <__stack+0x149>
 97e:	22 b3       	in	r18, 0x12	; 18
 980:	fc 01       	movw	r30, r24
 982:	ee 0f       	add	r30, r30
 984:	ff 1f       	adc	r31, r31
 986:	ee 0f       	add	r30, r30
 988:	ff 1f       	adc	r31, r31
 98a:	e8 0f       	add	r30, r24
 98c:	f9 1f       	adc	r31, r25
 98e:	ee 58       	subi	r30, 0x8E	; 142
 990:	ff 4f       	sbci	r31, 0xFF	; 255
 992:	81 e0       	ldi	r24, 0x01	; 1
 994:	90 e0       	ldi	r25, 0x00	; 0
 996:	01 80       	ldd	r0, Z+1	; 0x01
 998:	02 c0       	rjmp	.+4      	; 0x99e <__stack+0x13f>
 99a:	88 0f       	add	r24, r24
 99c:	99 1f       	adc	r25, r25
 99e:	0a 94       	dec	r0
 9a0:	e2 f7       	brpl	.-8      	; 0x99a <__stack+0x13b>
 9a2:	82 2b       	or	r24, r18
 9a4:	82 bb       	out	0x12, r24	; 18
 9a6:	16 c0       	rjmp	.+44     	; 0x9d4 <__stack+0x175>
                    else STD_CLR_BIT(PORTD,CfgPtr->PinNum);
 9a8:	22 b3       	in	r18, 0x12	; 18
 9aa:	fc 01       	movw	r30, r24
 9ac:	ee 0f       	add	r30, r30
 9ae:	ff 1f       	adc	r31, r31
 9b0:	ee 0f       	add	r30, r30
 9b2:	ff 1f       	adc	r31, r31
 9b4:	8e 0f       	add	r24, r30
 9b6:	9f 1f       	adc	r25, r31
 9b8:	fc 01       	movw	r30, r24
 9ba:	ee 58       	subi	r30, 0x8E	; 142
 9bc:	ff 4f       	sbci	r31, 0xFF	; 255
 9be:	81 e0       	ldi	r24, 0x01	; 1
 9c0:	90 e0       	ldi	r25, 0x00	; 0
 9c2:	01 80       	ldd	r0, Z+1	; 0x01
 9c4:	02 c0       	rjmp	.+4      	; 0x9ca <__stack+0x16b>
 9c6:	88 0f       	add	r24, r24
 9c8:	99 1f       	adc	r25, r25
 9ca:	0a 94       	dec	r0
 9cc:	e2 f7       	brpl	.-8      	; 0x9c6 <__stack+0x167>
 9ce:	80 95       	com	r24
 9d0:	82 23       	and	r24, r18
 9d2:	82 bb       	out	0x12, r24	; 18
        }

    }
    
    return RetVal;
}
 9d4:	80 e0       	ldi	r24, 0x00	; 0
 9d6:	08 95       	ret

000009d8 <Dio_Init_Channel>:
#include "Dio.h"
#include "../Dio_Cfg/Dio_Cfg.h"


Std_RetTyp Dio_Init_Channel (Dio_ChannelIdTyp ChannelId)
{
 9d8:	0f 93       	push	r16
 9da:	1f 93       	push	r17
 9dc:	cf 93       	push	r28
    Std_RetTyp retVal = STD_OK;
    const Dio_ChannelCfgTyp * CfgPtr = NULL;


    if (ChannelId >= NUM_OF_CHANNELS)
 9de:	87 30       	cpi	r24, 0x07	; 7
 9e0:	00 f5       	brcc	.+64     	; 0xa22 <Dio_Init_Channel+0x4a>
 9e2:	c8 2f       	mov	r28, r24
    {
        retVal = STD_NOT_OK;
    }
    else
    {
        CfgPtr = &Dio_CfgArr[ChannelId];
 9e4:	08 2f       	mov	r16, r24
 9e6:	10 e0       	ldi	r17, 0x00	; 0
        
        retVal = Dio_SetDir(ChannelId);
 9e8:	0e 94 2d 03 	call	0x65a	; 0x65a <Dio_SetDir>

        if (CfgPtr->PinDir == STD_INPUT)
 9ec:	f8 01       	movw	r30, r16
 9ee:	ee 0f       	add	r30, r30
 9f0:	ff 1f       	adc	r31, r31
 9f2:	ee 0f       	add	r30, r30
 9f4:	ff 1f       	adc	r31, r31
 9f6:	e0 0f       	add	r30, r16
 9f8:	f1 1f       	adc	r31, r17
 9fa:	ee 58       	subi	r30, 0x8E	; 142
 9fc:	ff 4f       	sbci	r31, 0xFF	; 255
 9fe:	92 81       	ldd	r25, Z+2	; 0x02
 a00:	99 23       	and	r25, r25
 a02:	81 f0       	breq	.+32     	; 0xa24 <Dio_Init_Channel+0x4c>
            if (CfgPtr->isPullUp != DIO_DNT_CARE)
            {
                retVal = STD_NOT_OK;
            }
            #endif
            retVal = Dio_Write(ChannelId , CfgPtr->initVal);
 a04:	f8 01       	movw	r30, r16
 a06:	ee 0f       	add	r30, r30
 a08:	ff 1f       	adc	r31, r31
 a0a:	ee 0f       	add	r30, r30
 a0c:	ff 1f       	adc	r31, r31
 a0e:	0e 0f       	add	r16, r30
 a10:	1f 1f       	adc	r17, r31
 a12:	f8 01       	movw	r30, r16
 a14:	ee 58       	subi	r30, 0x8E	; 142
 a16:	ff 4f       	sbci	r31, 0xFF	; 255
 a18:	64 81       	ldd	r22, Z+4	; 0x04
 a1a:	8c 2f       	mov	r24, r28
 a1c:	0e 94 21 04 	call	0x842	; 0x842 <Dio_Write>
 a20:	01 c0       	rjmp	.+2      	; 0xa24 <Dio_Init_Channel+0x4c>
    const Dio_ChannelCfgTyp * CfgPtr = NULL;


    if (ChannelId >= NUM_OF_CHANNELS)
    {
        retVal = STD_NOT_OK;
 a22:	81 e0       	ldi	r24, 0x01	; 1
            retVal = Dio_Write(ChannelId , CfgPtr->initVal);
        }
    }
    
    return retVal ;
}
 a24:	cf 91       	pop	r28
 a26:	1f 91       	pop	r17
 a28:	0f 91       	pop	r16
 a2a:	08 95       	ret

00000a2c <Dio_Init>:

Std_RetTyp Dio_Init (void)
{
 a2c:	1f 93       	push	r17
 a2e:	cf 93       	push	r28
 a30:	df 93       	push	r29
    Dio_ChannelIdTyp CurrentId;
    Std_RetTyp retVal = STD_OK;
 a32:	d0 e0       	ldi	r29, 0x00	; 0
    
    for (CurrentId = 0 ; CurrentId < NUM_OF_CHANNELS ; CurrentId++)
 a34:	c0 e0       	ldi	r28, 0x00	; 0
    {
        if (Dio_Init_Channel(CurrentId) == STD_NOT_OK) 
            retVal = STD_NOT_OK ;
 a36:	11 e0       	ldi	r17, 0x01	; 1
    Dio_ChannelIdTyp CurrentId;
    Std_RetTyp retVal = STD_OK;
    
    for (CurrentId = 0 ; CurrentId < NUM_OF_CHANNELS ; CurrentId++)
    {
        if (Dio_Init_Channel(CurrentId) == STD_NOT_OK) 
 a38:	8c 2f       	mov	r24, r28
 a3a:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <Dio_Init_Channel>
 a3e:	81 30       	cpi	r24, 0x01	; 1
 a40:	09 f4       	brne	.+2      	; 0xa44 <Dio_Init+0x18>
            retVal = STD_NOT_OK ;
 a42:	d1 2f       	mov	r29, r17
Std_RetTyp Dio_Init (void)
{
    Dio_ChannelIdTyp CurrentId;
    Std_RetTyp retVal = STD_OK;
    
    for (CurrentId = 0 ; CurrentId < NUM_OF_CHANNELS ; CurrentId++)
 a44:	cf 5f       	subi	r28, 0xFF	; 255
 a46:	c7 30       	cpi	r28, 0x07	; 7
 a48:	b9 f7       	brne	.-18     	; 0xa38 <Dio_Init+0xc>
        if (Dio_Init_Channel(CurrentId) == STD_NOT_OK) 
            retVal = STD_NOT_OK ;
    }

    return retVal;
}
 a4a:	8d 2f       	mov	r24, r29
 a4c:	df 91       	pop	r29
 a4e:	cf 91       	pop	r28
 a50:	1f 91       	pop	r17
 a52:	08 95       	ret

00000a54 <Dio_Read>:
        RetVal = STD_NOT_OK;
    }
    else
#endif
    {
        CfgPtr = &Dio_CfgArr[ChannelId];
 a54:	90 e0       	ldi	r25, 0x00	; 0
            RetVal = STD_NOT_OK;
        }
        else
#endif
        {
            switch(CfgPtr->PinPort)
 a56:	fc 01       	movw	r30, r24
 a58:	ee 0f       	add	r30, r30
 a5a:	ff 1f       	adc	r31, r31
 a5c:	ee 0f       	add	r30, r30
 a5e:	ff 1f       	adc	r31, r31
 a60:	e8 0f       	add	r30, r24
 a62:	f9 1f       	adc	r31, r25
 a64:	ee 58       	subi	r30, 0x8E	; 142
 a66:	ff 4f       	sbci	r31, 0xFF	; 255
 a68:	20 81       	ld	r18, Z
 a6a:	21 30       	cpi	r18, 0x01	; 1
 a6c:	f1 f0       	breq	.+60     	; 0xaaa <Dio_Read+0x56>
 a6e:	30 f0       	brcs	.+12     	; 0xa7c <Dio_Read+0x28>
 a70:	22 30       	cpi	r18, 0x02	; 2
 a72:	91 f1       	breq	.+100    	; 0xad8 <Dio_Read+0x84>
 a74:	23 30       	cpi	r18, 0x03	; 3
 a76:	09 f4       	brne	.+2      	; 0xa7a <Dio_Read+0x26>
 a78:	46 c0       	rjmp	.+140    	; 0xb06 <Dio_Read+0xb2>
 a7a:	5b c0       	rjmp	.+182    	; 0xb32 <Dio_Read+0xde>
            {
                case PORT_A:
                {
                    *u8pValuePtr = STD_GET_BIT(PINA,CfgPtr->PinNum);
 a7c:	29 b3       	in	r18, 0x19	; 25
 a7e:	30 e0       	ldi	r19, 0x00	; 0
 a80:	fc 01       	movw	r30, r24
 a82:	ee 0f       	add	r30, r30
 a84:	ff 1f       	adc	r31, r31
 a86:	ee 0f       	add	r30, r30
 a88:	ff 1f       	adc	r31, r31
 a8a:	8e 0f       	add	r24, r30
 a8c:	9f 1f       	adc	r25, r31
 a8e:	fc 01       	movw	r30, r24
 a90:	ee 58       	subi	r30, 0x8E	; 142
 a92:	ff 4f       	sbci	r31, 0xFF	; 255
 a94:	c9 01       	movw	r24, r18
 a96:	01 80       	ldd	r0, Z+1	; 0x01
 a98:	02 c0       	rjmp	.+4      	; 0xa9e <Dio_Read+0x4a>
 a9a:	95 95       	asr	r25
 a9c:	87 95       	ror	r24
 a9e:	0a 94       	dec	r0
 aa0:	e2 f7       	brpl	.-8      	; 0xa9a <Dio_Read+0x46>
 aa2:	81 70       	andi	r24, 0x01	; 1
 aa4:	fb 01       	movw	r30, r22
 aa6:	80 83       	st	Z, r24
                }break;
 aa8:	44 c0       	rjmp	.+136    	; 0xb32 <Dio_Read+0xde>
                case PORT_B:
                {
                    *u8pValuePtr = STD_GET_BIT(PINB,CfgPtr->PinNum);
 aaa:	26 b3       	in	r18, 0x16	; 22
 aac:	30 e0       	ldi	r19, 0x00	; 0
 aae:	fc 01       	movw	r30, r24
 ab0:	ee 0f       	add	r30, r30
 ab2:	ff 1f       	adc	r31, r31
 ab4:	ee 0f       	add	r30, r30
 ab6:	ff 1f       	adc	r31, r31
 ab8:	8e 0f       	add	r24, r30
 aba:	9f 1f       	adc	r25, r31
 abc:	fc 01       	movw	r30, r24
 abe:	ee 58       	subi	r30, 0x8E	; 142
 ac0:	ff 4f       	sbci	r31, 0xFF	; 255
 ac2:	c9 01       	movw	r24, r18
 ac4:	01 80       	ldd	r0, Z+1	; 0x01
 ac6:	02 c0       	rjmp	.+4      	; 0xacc <Dio_Read+0x78>
 ac8:	95 95       	asr	r25
 aca:	87 95       	ror	r24
 acc:	0a 94       	dec	r0
 ace:	e2 f7       	brpl	.-8      	; 0xac8 <Dio_Read+0x74>
 ad0:	81 70       	andi	r24, 0x01	; 1
 ad2:	fb 01       	movw	r30, r22
 ad4:	80 83       	st	Z, r24
                }break;
 ad6:	2d c0       	rjmp	.+90     	; 0xb32 <Dio_Read+0xde>
                case PORT_C:
                {
                    *u8pValuePtr = STD_GET_BIT(PINC,CfgPtr->PinNum);
 ad8:	23 b3       	in	r18, 0x13	; 19
 ada:	30 e0       	ldi	r19, 0x00	; 0
 adc:	fc 01       	movw	r30, r24
 ade:	ee 0f       	add	r30, r30
 ae0:	ff 1f       	adc	r31, r31
 ae2:	ee 0f       	add	r30, r30
 ae4:	ff 1f       	adc	r31, r31
 ae6:	8e 0f       	add	r24, r30
 ae8:	9f 1f       	adc	r25, r31
 aea:	fc 01       	movw	r30, r24
 aec:	ee 58       	subi	r30, 0x8E	; 142
 aee:	ff 4f       	sbci	r31, 0xFF	; 255
 af0:	c9 01       	movw	r24, r18
 af2:	01 80       	ldd	r0, Z+1	; 0x01
 af4:	02 c0       	rjmp	.+4      	; 0xafa <Dio_Read+0xa6>
 af6:	95 95       	asr	r25
 af8:	87 95       	ror	r24
 afa:	0a 94       	dec	r0
 afc:	e2 f7       	brpl	.-8      	; 0xaf6 <Dio_Read+0xa2>
 afe:	81 70       	andi	r24, 0x01	; 1
 b00:	fb 01       	movw	r30, r22
 b02:	80 83       	st	Z, r24
                }break;
 b04:	16 c0       	rjmp	.+44     	; 0xb32 <Dio_Read+0xde>
                case PORT_D:
                {
                    *u8pValuePtr = STD_GET_BIT(PIND,CfgPtr->PinNum);
 b06:	20 b3       	in	r18, 0x10	; 16
 b08:	30 e0       	ldi	r19, 0x00	; 0
 b0a:	fc 01       	movw	r30, r24
 b0c:	ee 0f       	add	r30, r30
 b0e:	ff 1f       	adc	r31, r31
 b10:	ee 0f       	add	r30, r30
 b12:	ff 1f       	adc	r31, r31
 b14:	8e 0f       	add	r24, r30
 b16:	9f 1f       	adc	r25, r31
 b18:	fc 01       	movw	r30, r24
 b1a:	ee 58       	subi	r30, 0x8E	; 142
 b1c:	ff 4f       	sbci	r31, 0xFF	; 255
 b1e:	c9 01       	movw	r24, r18
 b20:	01 80       	ldd	r0, Z+1	; 0x01
 b22:	02 c0       	rjmp	.+4      	; 0xb28 <Dio_Read+0xd4>
 b24:	95 95       	asr	r25
 b26:	87 95       	ror	r24
 b28:	0a 94       	dec	r0
 b2a:	e2 f7       	brpl	.-8      	; 0xb24 <Dio_Read+0xd0>
 b2c:	81 70       	andi	r24, 0x01	; 1
 b2e:	fb 01       	movw	r30, r22
 b30:	80 83       	st	Z, r24
        }

    }
    
    return RetVal;
}
 b32:	80 e0       	ldi	r24, 0x00	; 0
 b34:	08 95       	ret

00000b36 <T0_Timer0_Init>:

void T0_Timer0_Init(void)
{
    //Timer0 Init
		//Select Mode : CTC
			STD_CLR_BIT(TCCR0,WGM00);
 b36:	83 b7       	in	r24, 0x33	; 51
 b38:	8f 7b       	andi	r24, 0xBF	; 191
 b3a:	83 bf       	out	0x33, r24	; 51
			STD_SET_BIT(TCCR0,WGM01);
 b3c:	83 b7       	in	r24, 0x33	; 51
 b3e:	88 60       	ori	r24, 0x08	; 8
 b40:	83 bf       	out	0x33, r24	; 51
		// Enable Output Compare Interrupt Mask
			STD_SET_BIT(TIMSK,OCIE0);
 b42:	89 b7       	in	r24, 0x39	; 57
 b44:	82 60       	ori	r24, 0x02	; 2
 b46:	89 bf       	out	0x39, r24	; 57
		//Update OC Reg
			OCR0 = 62;
 b48:	8e e3       	ldi	r24, 0x3E	; 62
 b4a:	8c bf       	out	0x3c, r24	; 60
		//Clear TCNT
			TCNT0 = 0u;
 b4c:	12 be       	out	0x32, r1	; 50
		//Select PreScaler : 64
			STD_SET_BIT(TCCR0,CS00);
 b4e:	83 b7       	in	r24, 0x33	; 51
 b50:	81 60       	ori	r24, 0x01	; 1
 b52:	83 bf       	out	0x33, r24	; 51
			STD_SET_BIT(TCCR0,CS01);
 b54:	83 b7       	in	r24, 0x33	; 51
 b56:	82 60       	ori	r24, 0x02	; 2
 b58:	83 bf       	out	0x33, r24	; 51
			STD_CLR_BIT(TCCR0,CS02);
 b5a:	83 b7       	in	r24, 0x33	; 51
 b5c:	8b 7f       	andi	r24, 0xFB	; 251
 b5e:	83 bf       	out	0x33, r24	; 51
		//Enable Global Interrupt
			sei();
 b60:	78 94       	sei
 b62:	08 95       	ret

00000b64 <__vector_10>:
}


ISR (TIMER0_COMP_vect)
{
 b64:	1f 92       	push	r1
 b66:	0f 92       	push	r0
 b68:	0f b6       	in	r0, 0x3f	; 63
 b6a:	0f 92       	push	r0
 b6c:	11 24       	eor	r1, r1
 b6e:	2f 93       	push	r18
 b70:	3f 93       	push	r19
 b72:	4f 93       	push	r20
 b74:	5f 93       	push	r21
 b76:	6f 93       	push	r22
 b78:	7f 93       	push	r23
 b7a:	8f 93       	push	r24
 b7c:	9f 93       	push	r25
 b7e:	af 93       	push	r26
 b80:	bf 93       	push	r27
 b82:	ef 93       	push	r30
 b84:	ff 93       	push	r31
	TIMER0_COMP_HANDLER();
 b86:	0e 94 01 03 	call	0x602	; 0x602 <Timer0_500us_Cbk>
 b8a:	ff 91       	pop	r31
 b8c:	ef 91       	pop	r30
 b8e:	bf 91       	pop	r27
 b90:	af 91       	pop	r26
 b92:	9f 91       	pop	r25
 b94:	8f 91       	pop	r24
 b96:	7f 91       	pop	r23
 b98:	6f 91       	pop	r22
 b9a:	5f 91       	pop	r21
 b9c:	4f 91       	pop	r20
 b9e:	3f 91       	pop	r19
 ba0:	2f 91       	pop	r18
 ba2:	0f 90       	pop	r0
 ba4:	0f be       	out	0x3f, r0	; 63
 ba6:	0f 90       	pop	r0
 ba8:	1f 90       	pop	r1
 baa:	18 95       	reti

00000bac <Task_Init>:
#include "Tasks.h"

void Task_Init(void)
{
	// Modules Init		
		(void) Dio_Init();
 bac:	0e 94 16 05 	call	0xa2c	; 0xa2c <Dio_Init>
		(void) Led_Init();
 bb0:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <Led_Init>
		(void) Sw_Init();
 bb4:	0e 94 12 01 	call	0x224	; 0x224 <Sw_Init>
		//(void) Seg7_Init();
		WinBtn_Init();
 bb8:	0e 94 7d 00 	call	0xfa	; 0xfa <WinBtn_Init>
		Pos_Init();
 bbc:	0e 94 4f 00 	call	0x9e	; 0x9e <Pos_Init>
		Motor_Init();
 bc0:	0e 94 4c 00 	call	0x98	; 0x98 <Motor_Init>
		Mod_Init();
 bc4:	0e 94 49 00 	call	0x92	; 0x92 <Mod_Init>
		T0_Timer0_Init();
 bc8:	0e 94 9b 05 	call	0xb36	; 0xb36 <T0_Timer0_Init>
 bcc:	08 95       	ret

00000bce <Task_500us>:
}

void Task_500us(void)
{
 bce:	08 95       	ret

00000bd0 <Task_1ms>:

}

void Task_1ms (void)
{
 bd0:	08 95       	ret

00000bd2 <Task_2ms>:
		
}
void Task_2ms (void)
{
 bd2:	08 95       	ret

00000bd4 <Task_5ms>:

}
void Task_5ms (void)
{
 bd4:	08 95       	ret

00000bd6 <Task_10ms>:
	
}
void Task_10ms (void)
{
	Sw_UpdateState_Cyclic();
 bd6:	0e 94 2a 01 	call	0x254	; 0x254 <Sw_UpdateState_Cyclic>
	Pos_Cyclic();
 bda:	0e 94 52 00 	call	0xa4	; 0xa4 <Pos_Cyclic>
 bde:	08 95       	ret

00000be0 <Task_20ms>:
}
void Task_20ms (void)
{
 be0:	08 95       	ret

00000be2 <Task_50ms>:
	
}
void Task_50ms (void)
{
	Mod_Cyclic();
 be2:	0e 94 4a 00 	call	0x94	; 0x94 <Mod_Cyclic>
 be6:	08 95       	ret

00000be8 <Task_100ms>:
}
void Task_100ms (void)
{
 be8:	08 95       	ret

00000bea <Task_200ms>:

}

void Task_200ms (void)
{
 bea:	08 95       	ret

00000bec <Task_500ms>:
	
}
void Task_500ms (void)
{
 bec:	08 95       	ret

00000bee <Task_1000ms>:
	
}
void Task_1000ms (void)
{
 bee:	08 95       	ret

00000bf0 <Task_2000ms>:
	
}
void Task_2000ms (void)
{
 bf0:	08 95       	ret

00000bf2 <__umulhisi3>:
 bf2:	a2 9f       	mul	r26, r18
 bf4:	b0 01       	movw	r22, r0
 bf6:	b3 9f       	mul	r27, r19
 bf8:	c0 01       	movw	r24, r0
 bfa:	a3 9f       	mul	r26, r19
 bfc:	70 0d       	add	r23, r0
 bfe:	81 1d       	adc	r24, r1
 c00:	11 24       	eor	r1, r1
 c02:	91 1d       	adc	r25, r1
 c04:	b2 9f       	mul	r27, r18
 c06:	70 0d       	add	r23, r0
 c08:	81 1d       	adc	r24, r1
 c0a:	11 24       	eor	r1, r1
 c0c:	91 1d       	adc	r25, r1
 c0e:	08 95       	ret

00000c10 <_exit>:
 c10:	f8 94       	cli

00000c12 <__stop_program>:
 c12:	ff cf       	rjmp	.-2      	; 0xc12 <__stop_program>
